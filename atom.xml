<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text" xml:lang="en">Development, design, and more by David Ensinger</title><link type="application/atom+xml" rel="self" href="http://davidensinger.com/atom.xml"/><link href="http://davidensinger.com/"/><id>http://davidensinger.com/</id><updated>2014-04-06T19:08:46Z</updated><author><name>David Ensinger</name><email>hello@davidensinger.com</email></author><rights type="text">Copyright © 2014 David Ensinger. All rights reserved.</rights><entry><title type="text">Image Optimization Tools Overview</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2014/02/image-optimization-tools-overview/"/><id>http://davidensinger.com/2014/02/image-optimization-tools-overview</id><published>2014-02-15T09:42:00Z</published><updated>2014-02-15T09:42:00Z</updated><content type="html"><![CDATA[ <p>Invariably, the average website gets heavier with each passing year, which results in slower page loads for visitors. Most of this increase in page weight is due to the large file sizes of images. Odds are, as a developer, you’re guilty of this slow creep too, so you should take care to optimize your images to be as lightweight as possible.</p>

<h2>Online Tools</h2>

<p>The following are available to use online, for free:</p>

<ul>
<li><a href="http://www.jpegmini.com/main/shrink_photo">JPEGmini</a>: Per the docs, “Reduces the file size of JPEG photos by up to 5X”</li>
<li><a href="http://www.smushit.com/ysmush.it/">Smush.it</a>: Process JPG, GIF, and PNG images that are up to one megabyte in size</li>
<li><a href="http://compresspng.com/">Compress PNG</a>: Automatically converts BMP, ICO, GIF, and JPG to PNG</li>
<li><a href="http://compressjpeg.com/">Compress JPEG</a>: Automatically converts BMP and PNG to JPG</li>
<li><a href="https://tinypng.com/">TinyPNG</a>: In addition, has premium plugin for Photoshop</li>
<li><a href="http://b64.io/">b64.io</a>: Optimizes PNG, JPG, GIF or SVG and then converts to Base64</li>
</ul>


<h2>Desktop Tools</h2>

<p>These are my preferred applications when optimizing images. Also I can’t believe that <strong>ImageOptim</strong> and <strong>ImageAlpha</strong> are free because <strong>they’re that good</strong>.</p>

<ul>
<li><a href="http://www.jpegmini.com/">JPEGmini</a>: An application, as well as an online tool</li>
<li><a href="http://imageoptim.com/">ImageOptim</a>: Losslessly optimizes PNG, JPG, and GIF</li>
<li><a href="http://pngmini.com/">ImageAlpha</a>: Lossy compression of 24-bit PNG</li>
</ul>


<h2>Tooling with Grunt</h2>

<p>If you’re using <a href="http://gruntjs.com/">Grunt</a> then check out <a href="http://blog.grayghostvisuals.com/grunt/image-optimization/">Optimizing Images with Grunt</a> and these plugins:</p>

<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-imagemin">grunt-contrib-imagemin</a>: Minify PNG, JPG, and GIF</li>
<li><a href="http://jamiemason.github.io/ImageOptim-CLI/">ImageOptim-CLI</a>: Uses <strong>ImageOptim</strong>, <strong>ImageAlpha</strong>, and <strong>JPEGmini</strong></li>
<li><a href="https://github.com/JamieMason/grunt-imageoptim">grunt-imageoptim</a>: A plugin for Grunt for <strong>ImageOptim-CLI</strong></li>
</ul>

 ]]></content></entry><entry><title type="text">Current Favicon Icon Stack</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2014/02/current-favicon-icon-stack/"/><id>http://davidensinger.com/2014/02/current-favicon-icon-stack</id><published>2014-02-06T10:00:00Z</published><updated>2014-02-06T10:00:00Z</updated><content type="html"><![CDATA[ <p>Whether it’s the file format, dimensions, or browser support (amongst other concerns), it’s confusing to figure out the best icon stack for one’s website. What follows is my current preferred markup, with some recommended tools and resources.</p>

<div class="yellow-box">
  <p><strong>Please Note:</strong> This is not an exhaustive list and surely I don’t cover all possible browsers and devices. Hopefully I get the majority, though :)</p>
</div>


<h2>Favicon</h2>

<p>For the favicon, I use <a href="http://www.kodlian.com/apps/icon-slate">Icon Slate</a> to combine a 32x32px PNG with a 16x16px PNG to form the ICO, which gives me support for HiDPI devices. For optimal browser support I drop the resulting ICO into the site root with the following markup:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon.ico&quot;</span> <span class="nt">&gt;</span>
</code></pre></div>


<h2>iOS</h2>

<p>There are <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/MobileHIG/IconMatrix.html">half a dozen icon dimensions</a> required to support all the different iOS devices. Previously you needed to follow Apple’s naming conventions for the filenames, but these days the following markup works:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;152x152&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-152x152.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;144x144&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-144x144.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;120x120&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-120x120.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;114x114&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-114x114.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;76x76&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-76x76.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;72x72&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-72x72.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-57x57.png&quot;</span><span class="nt">&gt;</span>
</code></pre></div>


<h2>Android</h2>

<p>Seemingly older versions of Android will fallback to use the <code>apple-touch-icon-precomposed</code> icons. <a href="https://developers.google.com/chrome/mobile/docs/installtohomescreen">Newer versions of Chrome on Android</a> will use the “largest icon found in one of the following <code>&lt;link&gt;</code> tags”:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">sizes=</span><span class="s">&quot;196x196&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-196x196.png&quot;</span><span class="nt">&gt;</span>
</code></pre></div>


<h2>IE</h2>

<p>For <a href="http://msdn.microsoft.com/en-us/library/ie/dn255024%28v=vs.85%29.aspx">Internet Explorer</a>, I followed the Windows 8 Tiles section of <a href="http://viget.com/inspire/designing-device-assets-templates-techniques-and-tips">Designing Device Assets: Templates and Tips</a> and came up with the following:</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-TileColor&quot;</span> <span class="na">content=</span><span class="s">&quot;#FFFFFF&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-TileImage&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-144x144-ie10.png&quot;</span><span class="nt">&gt;</span>

<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-square70x70logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-128x128-ie11.png&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-square150x150logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-270x270-ie11.png&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-wide310x150logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-558x270-ie11.png&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-square310x310logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-558x558-ie11.png&quot;</span><span class="nt">/&gt;</span>
</code></pre></div>


<p>The former two lines of markup are for IE10, while the latter four are for IE11. See the aforementioned blog post for very helpful PSD templates.</p>

<p>That’s it! If any of this is incorrect, I’d like to know. Send me <a href="https://twitter.com/davidensinger">a tweet about it</a>!</p>
 ]]></content></entry><entry><title type="text">Quick Mobile Testing Tips and Tricks</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/12/quick-mobile-testing-tips-and-tricks/"/><id>http://davidensinger.com/2013/12/quick-mobile-testing-tips-and-tricks</id><published>2013-12-02T05:44:00Z</published><updated>2013-12-02T05:44:00Z</updated><content type="html"><![CDATA[ <p>Have you ever needed to track down a bug in mobile, but due to circumstances found yourself without the needed browser, operating system, and/or device? It can be really frustrating, especially when working with an ever approaching deadline. Thankfully, there are many tools available to help debug in such a situation, even if using them isn’t a proper substitute for the actual device.</p>

<div class="red-box">
  <p><strong>Warning:</strong> For real, the following tools are definitely not a proper substitute for actual devices.</p>
</div>


<h2>iOS Simulator</h2>

<p>For debugging on iOS, check out the <a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html">iOS Simulator</a>, which comes packaged within <a href="https://developer.apple.com/xcode/">Xcode</a>. The simulator has different versions of both the <strong>iPhone</strong> and <strong>iPad</strong>, which can easily be rotated and scaled, to test in portrait and landscape orientations and fit onto your monitor, respectively.</p>

<p><img src="/assets/img/posts/2013-12-02-safari.jpg" alt="Image of the iOS Simulator" class="media-center img-border" /></p>

<p>To open, go to <code>Applications &gt; Xcode (right click and “Show Package Contents”) &gt; Contents &gt; Applications &gt; iPhone Simulator</code>. Once the program is opened, you can easily add it to your the Dock.</p>

<h3>Integration with Safari Web Inspector</h3>

<p>The iOS Simulator also has integration with the <a href="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Introduction/Introduction.html">Safari Web Inspector</a>, which can be accessed from <code>Develop &gt; iPhone (or iPad) Simulator</code>.</p>

<div class="yellow-box">
  <p><strong>More Info:</strong> Here’s a great guide to <a href="http://webdesign.tutsplus.com/tutorials/workflow-tutorials/quick-tip-using-web-inspector-to-debug-mobile-safari/">Using Web Inspector to Debug Mobile Safari</a> by <a href="https://twitter.com/jimniels">@jimniels</a>.</p>
</div>


<h2>Opera Mobile Emulator</h2>

<p>Opera supports mobile debugging via their <a href="http://www.opera.com/developer/mobile-emulator">Opera Mobile Emulator</a>, which comes ready with more than a dozen presets to mimic the “defined resolution, pixel density, user interface” of popular devices. It can be paired with <a href="http://www.opera.com/dragonfly/">Opera Dragonfly</a>, a suite of developer tools.</p>

<p><img src="/assets/img/posts/2013-12-02-opera.jpg" alt="Image of the Opera Mobile Emulator" class="media-center img-border" /></p>

<h2>Firefox</h2>

<p>The <a href="https://developer.mozilla.org/en-US/docs/Tools">Firefox Developer Tools</a> have come a long way in the past year. Amongst the many recent additions is the <a href="https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_View">Responsive Design View</a>, a tool to easily switch between viewport widths and device orientations. For additional resolutions, see <a href="https://addons.mozilla.org/en-US/firefox/addon/more-display-resolutions/">More Display Resolutions</a>.</p>

<p><img src="/assets/img/posts/2013-12-02-firefox.jpg" alt="Image of the Responsive Design View within Firefox" class="media-center img-border" /></p>

<h3>Extensions for Firefox</h3>

<p>These extensions may be helpful as well:</p>

<ul>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/more-display-resolutions/">More Display Resolutions</a>: Adds additional resolutions to the Responsive Design View</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-switcher/">User Agent Switcher</a>: Adds a menu and toolbar button to switch the browser’s user-agent string.</li>
</ul>


<h2>Chrome</h2>

<p>The <a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a> come with a several features that are helpful when <a href="https://developers.google.com/chrome-developer-tools/docs/mobile-emulation">emulating mobile</a>:</p>

<ul>
<li>Emulate touch events (usally not present on traditional desktop devices, although this is changing)</li>
<li>Emulate device viewports</li>
<li>Network bandwidth throttling (simulate a slow connection)</li>
<li>Device orientation overrides, amongst others</li>
</ul>


<p><img src="/assets/img/posts/2013-12-02-chrome.jpg" alt="Image of the Mobile Emulation overrides within Chrome" class="media-center img-border" /></p>

<h3>Extensions for Chrome</h3>

<p>These extensions may be helpful as well:</p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal">Resolution Test</a>: Views for different screen resolutions, with an option to define your own resolutions</li>
<li><a href="https://chrome.google.com/webstore/detail/responsive-inspector/memcdolmmnmnleeiodllgpibdjlkbpim">Responsive Inspector</a>: Inspects media queries</li>
<li><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg">User-Agent Switcher for Chrome</a>: Spoofs and mimics user-agent strings.</li>
</ul>


<p>That’s it. May your mobile debugging be better, especially when ill-equipped and under pressure!</p>
 ]]></content></entry><entry><title type="text">Building a Better Sitemap.xml with Jekyll</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll/"/><id>http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll</id><published>2013-11-03T11:50:00Z</published><updated>2013-11-03T11:50:00Z</updated><content type="html"><![CDATA[ <p>In the past several months I’ve made many incremental improvements to this website, including how I generate my <a href="http://davidensinger.com/sitemap.xml">Sitemap.xml</a>. While my revisions are certainly not jaw dropping, they have definitely improved the quality of my sitemap and are thus worth writing about, if only to provide a reference point to other developers. To that end, here’s a note about the changes I’ve made in my current implementation.</p>

<h2>Previous Configuration</h2>

<p>In an earlier post, <a href="http://davidensinger.com/2013/03/generating-a-sitemap-in-jekyll-without-a-plugin/">Generating a Sitemap in Jekyll without a Plugin</a>, I went over the configuration of my previous sitemap, which looked like this:</p>

<div class="highlight"><pre><code class="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;urlset</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span><span class="nt">&gt;</span>
  {% for post in site.posts %}
    <span class="nt">&lt;url&gt;</span>
      <span class="nt">&lt;loc&gt;</span>{{ site.baseurl }}{{ post.url }}<span class="nt">&lt;/loc&gt;</span>
      {% if post.lastmod == null %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.date | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% else %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.lastmod | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% endif %}
      <span class="nt">&lt;changefreq&gt;</span>weekly<span class="nt">&lt;/changefreq&gt;</span>
      <span class="nt">&lt;priority&gt;</span>1.0<span class="nt">&lt;/priority&gt;</span>
    <span class="nt">&lt;/url&gt;</span>
  {% endfor %}
  {% for page in site.pages %}
    {% if page.sitemap != null and page.sitemap != empty %}
      <span class="nt">&lt;url&gt;</span>
        <span class="nt">&lt;loc&gt;</span>{{ site.baseurl }}{{ page.url }}<span class="nt">&lt;/loc&gt;</span>
        <span class="nt">&lt;lastmod&gt;</span>{{ page.sitemap.lastmod | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
        <span class="nt">&lt;changefreq&gt;</span>{{ page.sitemap.changefreq }}<span class="nt">&lt;/changefreq&gt;</span>
        <span class="nt">&lt;priority&gt;</span>{{ page.sitemap.priority }}<span class="nt">&lt;/priority&gt;</span>
       <span class="nt">&lt;/url&gt;</span>
    {% endif %}
  {% endfor %}
<span class="nt">&lt;/urlset&gt;</span>
</code></pre></div>


<h2>Current Configuration</h2>

<p>For my current implementation, I made the following changes:</p>

<ul>
<li>The <code>urlset</code> is much more terse as I stripped away all the attributes, save for <strong>xmlns</strong></li>
<li>My top level page is now included, although the <code>changefreq</code> is admittedly wishful thinking on my part :)</li>
<li>The <code>changefreq</code> and <code>priority</code> elements for my pages and posts may be omitted, as those elements now have fallback values.</li>
</ul>


<div class="highlight"><pre><code class="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;urlset</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;url&gt;</span>
    <span class="nt">&lt;loc&gt;</span>{{ site.url }}/<span class="nt">&lt;/loc&gt;</span>
    <span class="nt">&lt;lastmod&gt;</span>{{ site.time | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
    <span class="nt">&lt;changefreq&gt;</span>weekly<span class="nt">&lt;/changefreq&gt;</span>
    <span class="nt">&lt;priority&gt;</span>1.0<span class="nt">&lt;/priority&gt;</span>
  <span class="nt">&lt;/url&gt;</span>
  {% for post in site.posts %}
    <span class="nt">&lt;url&gt;</span>
      <span class="nt">&lt;loc&gt;</span>{{ site.url }}{{ post.url }}<span class="nt">&lt;/loc&gt;</span>
      {% if post.sitemap.lastmod %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.sitemap.lastmod | date: &quot;%Y-%m-%d&quot; }}<span class="nt">&lt;/lastmod&gt;</span>
      {% elsif post.date %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.date | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% else %}
        <span class="nt">&lt;lastmod&gt;</span>{{ site.time | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% endif %}
      {% if post.sitemap.changefreq %}
        <span class="nt">&lt;changefreq&gt;</span>{{ post.sitemap.changefreq }}<span class="nt">&lt;/changefreq&gt;</span>
      {% else %}
        <span class="nt">&lt;changefreq&gt;</span>monthly<span class="nt">&lt;/changefreq&gt;</span>
      {% endif %}
      {% if post.sitemap.priority %}
        <span class="nt">&lt;priority&gt;</span>{{ post.sitemap.priority }}<span class="nt">&lt;/priority&gt;</span>
      {% else %}
        <span class="nt">&lt;priority&gt;</span>0.5<span class="nt">&lt;/priority&gt;</span>
      {% endif %}
    <span class="nt">&lt;/url&gt;</span>
  {% endfor %}
  {% for page in site.pages %}
  <span class="nt">&lt;url&gt;</span>
    <span class="nt">&lt;loc&gt;</span>{{ site.url }}{{ page.url }}<span class="nt">&lt;/loc&gt;</span>
    {% if page.sitemap.lastmod %}
      <span class="nt">&lt;lastmod&gt;</span>{{ page.sitemap.lastmod | date: &quot;%Y-%m-%d&quot; }}<span class="nt">&lt;/lastmod&gt;</span>
    {% elsif page.date %}
      <span class="nt">&lt;lastmod&gt;</span>{{ page.date | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
    {% else %}
      <span class="nt">&lt;lastmod&gt;</span>{{ site.time | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
    {% endif %}
    {% if page.sitemap.changefreq %}
      <span class="nt">&lt;changefreq&gt;</span>{{ page.sitemap.changefreq }}<span class="nt">&lt;/changefreq&gt;</span>
    {% else %}
      <span class="nt">&lt;changefreq&gt;</span>monthly<span class="nt">&lt;/changefreq&gt;</span>
    {% endif %}
    {% if page.sitemap.priority %}
      <span class="nt">&lt;priority&gt;</span>{{ page.sitemap.priority }}<span class="nt">&lt;/priority&gt;</span>
    {% else %}
      <span class="nt">&lt;priority&gt;</span>0.3<span class="nt">&lt;/priority&gt;</span>
    {% endif %}
  <span class="nt">&lt;/url&gt;</span>
  {% endfor %}
<span class="nt">&lt;/urlset&gt;</span>
</code></pre></div>


<h2>Front Matter</h2>

<p>I can now add the following variables, all of which are optional, to the front matter of my posts and pages:</p>

<div class="highlight"><pre><code class="yaml"><span class="l-Scalar-Plain">sitemap</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">lastmod</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2014-01-23</span>
  <span class="l-Scalar-Plain">priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.7</span>
  <span class="l-Scalar-Plain">changefreq</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">monthly</span>
</code></pre></div>


<p>As you can see, the changes I made are simple, but put together they make for a much more flexible implementation.</p>

<div class="gray-box">
  <p><strong>More Info:</strong> Visit the official <a href="http://www.sitemaps.org/">sitemaps.org</a> to learn more about the protocol.</p>
</div>

 ]]></content></entry><entry><title type="text">Suggested Tweet Plugin for Jekyll</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/09/suggested-tweet-plugin-for-jekyll/"/><id>http://davidensinger.com/2013/09/suggested-tweet-plugin-for-jekyll</id><published>2013-09-16T12:50:00Z</published><updated>2013-09-16T12:50:00Z</updated><content type="html"><![CDATA[ <p>It’s always a really nice feeling when one sees one’s posts shared with others, usually via blog post or Tweet. In the spirit of encouraging more of this, I present to you the <a href="https://github.com/davidensinger/jekyll-suggested-tweet">Suggested Tweet</a> plugin for <a href="http://jekyllrb.com/">Jekyll</a>. With this plugin, visitors to your site need no longer grope for words while they attempt to share your content!</p>

<h2>About the Plugin</h2>

<p>The <strong>Suggested Tweet</strong> plugin is a custom <a href="http://wiki.shopify.com/Liquid">Liquid Tag</a> for <strong>Jekyll</strong> that allows for the embedding of suggested tweets via <a href="https://dev.twitter.com/docs/intents">Twitter’s Web Intents API</a>. It makes liberal use of <a href="http://richhollis.co.uk/">Rich Hollis’s</a> <a href="https://github.com/richhollis/twitter_web_intents">Twitter Web Intents Ruby Gem</a> and was lovingly made by <a href="http://2john4tv.biz/">John Colvin</a> and me.</p>

<h2>Installation</h2>

<ol>
<li>Copy <strong>suggested-tweet.rb</strong> into your site’s <strong>_plugins</strong> directory</li>
<li>Install <strong>twitter_web_intents gem</strong>, either manually or via <strong>Bundler</strong></li>
<li>Add desired parameters to <strong>_config.yml</strong></li>
<li>Add desired parameters to <strong>YAML front-matter</strong> of page</li>
<li>Add <code>{% suggested_tweet %}</code> tag to your post or template.</li>
</ol>


<h2>Configuration</h2>

<p>The following parameters may be set globally in <strong>_config.yml</strong> or on a per page basis in the <strong>YAML front-matter</strong>. Parameters set in the <strong>YAML front-matter</strong> take precedence over those set in <strong>_config.yml</strong>. Note that all parameters are optional, although be sure to set at least one!</p>

<div class="highlight"><pre><code class="yaml"><span class="l-Scalar-Plain">suggested_tweet</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span>                  <span class="s">&#39;http://davidensinger.com/&#39;</span>
  <span class="l-Scalar-Plain">via</span><span class="p-Indicator">:</span>                  <span class="s">&#39;davidensinger&#39;</span>
  <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span>                 <span class="s">&#39;Hello</span><span class="nv"> </span><span class="s">world&#39;</span>
  <span class="l-Scalar-Plain">in_reply_to</span><span class="p-Indicator">:</span>          <span class="l-Scalar-Plain">331434728957833218</span>
  <span class="l-Scalar-Plain">hashtags</span><span class="p-Indicator">:</span>             <span class="p-Indicator">[</span><span class="s">&#39;Jekyll&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;Twitter&#39;</span><span class="p-Indicator">]</span>
  <span class="l-Scalar-Plain">related</span><span class="p-Indicator">:</span>              <span class="p-Indicator">[</span><span class="s">&#39;davidensinger&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;richhollis&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;2john4tv&#39;</span><span class="p-Indicator">]</span>
</code></pre></div>


<h2>Usage</h2>

<p>Put the custom Liquid tag anywhere you want, whether that be within a post, layout, or include:</p>

<p><code>{% suggested_tweet %}</code></p>

<h2>Output</h2>

<p>The tag renders as a properly encoded URL:</p>

<p><code>https://twitter.com/intent/tweet?hashtags=Jekyll,Twitter&amp;in_reply_to=331434728957833218&amp;related=davidensinger,richhollis,2john4tv&amp;text=Hello+world&amp;url=http%3A%2F%2Fdavidensinger.com&amp;via=davidensinger</code></p>

<h2>Liquid Output for Parameters</h2>

<p>Any (and all) of the parameters may be used together with the <strong>Suggested Tweet</strong> tag. These may be helpful if decide to include the tag outside of a post and in a template:</p>

<ul>
<li><strong>_config.yml:</strong> <code>{{ site.suggested_tweet.text }}</code></li>
<li><strong>YAML front matter:</strong> <code>{{ page.suggested_tweet.text }}</code></li>
</ul>


<h2>A Practical Example</h2>

<p>The following block of code can be found in the footer of my <a href="https://github.com/davidensinger/davidensinger.github.io/blob/source/_layouts/post.html">posts template</a>. You’ll see that I only print out the <strong>text</strong> and <strong>hashtags</strong> parameters, even though all six variables are available to me. This is due to parameters not displaying to my liking (<strong>url</strong> and <strong>via</strong>) or not displaying at all (<strong>in_reply_to</strong> and <strong>related</strong>) and for styling purposes as well.</p>

<div class="highlight"><pre><code class="html">{% if page.suggested_tweet %}
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;entry-meta-suggested-tweet&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-title&quot;</span><span class="nt">&gt;</span>Spread the Word<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% suggested_tweet %}&quot;</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-bubble&quot;</span><span class="nt">&gt;</span>
      {% if page.suggested_tweet.text != empty %}
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-text&quot;</span><span class="nt">&gt;</span>{{ page.suggested_tweet.text }}<span class="nt">&lt;/span&gt;</span>
      {% endif %}
      {% if page.suggested_tweet.hashtags != empty %}
        {% for hashtag in page.suggested_tweet.hashtags %}
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-hashtag&quot;</span><span class="nt">&gt;</span>#{{ hashtag }}<span class="nt">&lt;/span&gt;</span>
        {% endfor %}
      {% endif %}
    <span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-link&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% suggested_tweet %}&quot;</span> <span class="na">class=</span><span class="s">&quot;icon-left icon-twitter&quot;</span><span class="nt">&gt;</span>Click to Tweet<span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;small&gt;</span>(you may edit before posting.)<span class="nt">&lt;/small&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
{% endif %}
</code></pre></div>


<h2>Roadmap</h2>

<ul>
<li>Add an option to allow for parameters to be combined if 1) they’ve been set in both <strong>_config.yml</strong> and <strong>YAML front-matter</strong> of a page and 2) they accept multiple values, such as hashtags and related</li>
<li>Allow for parameters to be set within the tag itself, but without using a regular expression to do so. Possible? Yay or nay?</li>
</ul>

 ]]></content></entry><entry><title type="text">How I use Reduce to Minify and Optimize Assets for Production</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/08/how-i-use-reduce-to-minify-and-optimize-assets-for-production/"/><id>http://davidensinger.com/2013/08/how-i-use-reduce-to-minify-and-optimize-assets-for-production</id><published>2013-08-04T08:19:00Z</published><updated>2013-08-04T08:19:00Z</updated><content type="html"><![CDATA[ <p>Now that I’ve set up <a href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/">my development environment with Rake</a>, I’m able to easily minify and optimize the assets I use for my site. To do this I use <a href="https://github.com/grosser/reduce">Reduce</a>, which is a fantastic Ruby gem by <a href="http://grosser.it/">Michael Grosser</a> to minify and compress CSS, HTML, JavaScript and Jpeg and PNG, amongst other formats.</p>

<h2>Why Compress Assets?</h2>

<p>The obvious benefit to minifying text and optimizing images is that it reduces filesize, so the assets load faster. This is the low hanging fruit of front end optimization and usually quite impactful on performance, despite being so easy to do.</p>

<h2>My Set Up</h2>

<p>To use Reduce I added it to my site’s project with <strong>Bundler</strong> so that I may then invoke it in my <strong>Rake</strong> task to build for production. A benefit to having separate environments for development and production is that I can delay all optimization to my production build, which saves considerable time during development.</p>

<p>I previously tried several <strong>Jekyll</strong> plugins to manage this, but didn’t like the delay between saving a file and then waiting for Jekyll to rebuild. Invariably, the bottleneck was the file compression, especially in regards to the minification of the HTML, which is perhaps due to the sheer quantity of files involved.</p>

<p>The task I invoke to minify the assets is courtesy of <a href="http://www.pacbard.tk/">Emanuele Bardelli</a>, who added the HTML compression functionality to Reduce. See <a href="https://github.com/pacbard/blog/blob/master/_rake/minify.rake">his rake task</a>, which I’ve only superficially modified:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Minify _site/&quot;</span>
<span class="n">task</span> <span class="ss">:minify</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compressing static assets&quot;</span>
  <span class="n">original</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
  <span class="n">compressed</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;_site/**/*.*&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
    <span class="k">case</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
      <span class="k">when</span> <span class="s2">&quot;.css&quot;</span><span class="p">,</span> <span class="s2">&quot;.gif&quot;</span><span class="p">,</span> <span class="s2">&quot;.html&quot;</span><span class="p">,</span> <span class="s2">&quot;.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;.jpeg&quot;</span><span class="p">,</span> <span class="s2">&quot;.js&quot;</span><span class="p">,</span> <span class="s2">&quot;.png&quot;</span><span class="p">,</span> <span class="s2">&quot;.xml&quot;</span>
        <span class="nb">puts</span> <span class="s2">&quot;Processing: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
        <span class="n">original</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
        <span class="n">min</span> <span class="o">=</span> <span class="no">Reduce</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">min</span><span class="p">)</span>
        <span class="k">end</span>
        <span class="n">compressed</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
      <span class="k">else</span>
        <span class="nb">puts</span> <span class="s2">&quot;Skipping: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="k">end</span>
  <span class="k">end</span>
  <span class="nb">puts</span> <span class="s2">&quot;Total compression %0.2f\%&quot;</span> <span class="o">%</span> <span class="p">(((</span><span class="n">original</span><span class="o">-</span><span class="n">compressed</span><span class="p">)</span><span class="o">/</span><span class="n">original</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>


<p>How easy is that? With a simple <code>rake build:pro</code> command I’m able to build my site with production ready assets, which I then commit and deploy to GitHub.</p>
 ]]></content></entry><entry><title type="text">Easy Sass Source Maps with Development Environments and Rake</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/"/><id>http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake</id><published>2013-07-26T09:26:00Z</published><updated>2013-07-26T09:26:00Z</updated><content type="html"><![CDATA[ <p>In addition to <a href="http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/">automating the deployment of Jekyll</a>, I also wrote a couple Rake tasks to streamline the building of my site. They’re quite simple, but they allow me to have environments for both development and production. It’s now just as easy to use Sass source maps in my development environment as it is to build compressed assets for production.</p>

<h2>Source Maps in Sass</h2>

<p>So what are <a href="http://net.tutsplus.com/tutorials/tools-and-tips/source-maps-101/">Source Maps</a>? Basically they’re what link the compiled code that you see in your browser to the original source files that live in your development environment. This makes it really simple to debug code that may otherwise be quite difficult to work through.</p>

<h3>How to</h3>

<p>It’s fairly straightforward to set up source maps in Sass for viewing in Chrome. Thankfully, the process has been well documented by Tim Lucas in his article, “<a href="https://medium.com/what-i-learned-building/b4daab987fb0">Getting started with CSS sourcemaps and in-browser Sass editing</a>.” I’ll still lay out the high-level steps here, though:</p>

<ol>
<li>Install <strong>Sass 3.3+</strong></li>
<li>Run Sass with the <code>--sourcemap</code> flag</li>
<li>Enable <strong>CSS Source Maps</strong> support in <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a></li>
</ol>


<p>Once you’ve followed those steps you should be able to inspect CSS properties in DevTools and then click them to go straight to their source. Pretty neat, right?</p>

<h2>Setting up Environments with Rake</h2>

<p>Now that the source maps are working, it’s time to set up a way to switch between the compiled Sass for development and for production. To do this, I’ve created a couple tasks with Rake:</p>

<h3>Development</h3>

<p>To start my development, I use the following Rake task, which is based off the work of Nick Quaranto in “<a href="http://quaran.to/blog/2013/01/09/use-jekyll-scss-coffeescript-without-plugins/">Use Jekyll, SCSS, and CoffeeScript without plugins</a>.” The task starts Sass and Jekyll with the desired flags, although note that it must first run the <code>:recompile_sass</code> task, which I’ll go over shortly.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Build _site/ for development&quot;</span>
<span class="n">task</span> <span class="ss">:dev</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">##  Starting Jekyll and compiling Sass with source map&quot;</span>
  <span class="n">pids</span> <span class="o">=</span> <span class="o">[</span>
    <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">),</span>
    <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;jekyll serve -w&quot;</span><span class="p">)</span>
  <span class="o">]</span>

  <span class="nb">trap</span> <span class="s2">&quot;INT&quot;</span> <span class="k">do</span>
    <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s2">&quot;INT&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pids</span>
    <span class="nb">exit</span> <span class="mi">1</span>
  <span class="k">end</span>

  <span class="kp">loop</span> <span class="k">do</span>
    <span class="nb">sleep</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<h3>Production</h3>

<p>To build for production, I use the following task, which compiles the Sass (note the <code>--style compressed</code>), builds Jekyll, and then deletes the leftover source map file for Sass. Again, the task must <code>:recompile_sass</code> before starting.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Build _site/ for production&quot;</span>
<span class="n">task</span> <span class="ss">:pro</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compiling Sass&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;sass --style compressed assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Building Jekyll to _site/&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;jekyll build&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting Sass source map&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -f _site/assets/css/*.map&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h2>Force Sass to Recompile</h2>

<p>For both my development and production Rake tasks I force Sass to recompile. I do this because Sass recompiles only when the compiled CSS has been deleted or when the Sass has been modified.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Recompile Sass&quot;</span>
<span class="n">task</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing Sass to recompile&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;touch -m assets/scss/styles.scss&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h2>Complete Tasks</h2>

<p>The following are the complete Rake tasks. You’ll notice that I’ve namespaced the build tasks, as well as invoked a minify task, which I’ll go over in a future post.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Recompile Sass&quot;</span>
<span class="n">task</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing Sass to recompile&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;touch -m assets/scss/styles.scss&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>

<span class="n">namespace</span> <span class="ss">:build</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">&quot;Build _site/ for development&quot;</span>
  <span class="n">task</span> <span class="ss">:dev</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">##  Starting Jekyll and recompiling Sass with source map&quot;</span>
    <span class="n">pids</span> <span class="o">=</span> <span class="o">[</span>
      <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">),</span>
      <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;jekyll serve -w&quot;</span><span class="p">)</span>
    <span class="o">]</span>

    <span class="nb">trap</span> <span class="s2">&quot;INT&quot;</span> <span class="k">do</span>
      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s2">&quot;INT&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pids</span>
      <span class="nb">exit</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="kp">loop</span> <span class="k">do</span>
      <span class="nb">sleep</span> <span class="mi">1</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s2">&quot;Build _site/ for production&quot;</span>
  <span class="n">task</span> <span class="ss">:pro</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compiling Sass&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;sass --style compressed assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Building Jekyll to _site/&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;jekyll build&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;minify&quot;</span><span class="o">].</span><span class="n">invoke</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting Sass source map&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -f _site/assets/css/*.map&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>



 ]]></content></entry><entry><title type="text">Automating Jekyll Deployment to GitHub Pages with Rake</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/"/><id>http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake</id><published>2013-07-23T09:24:00Z</published><updated>2013-07-23T09:24:00Z</updated><content type="html"><![CDATA[ <p>I recently automated the deployment of my site to <strong>GitHub Pages</strong>, which is something that <a href="http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages/">I’ve wanted to do for awhile</a>. Whereas I would previously enter a string of commands into the terminal, I now use <strong>Rake</strong> to handle those commands for me.</p>

<h2>What is Rake</h2>

<p>For those who don’t know (and this was me until recently), <a href="http://rake.rubyforge.org/">Rake</a> is “a simple ruby build program with capabilities similar to make.” In other words, it’s a tool that helps automate the tedium that often comes with managing a website.</p>

<div class="gray-box">
  <p><strong>More Info:</strong> Jason Seifer has a pretty good <a href="http://jasonseifer.com/2010/04/06/rake-tutorial">Rake Tutorial</a> for developers new to Rake.</p>
</div>


<h2>My Workflow</h2>

<p>I’ve set up Jekyll to consist of two branches: <strong>source</strong> and <strong>master</strong>. The source branch consists of the entire project and as such tracks all changes, while the master branch consists solely of the compiled site, which can be found in the <strong>_site</strong> subdirectory.</p>

<p>My typical workflow is to write a post (or modify the site design) and then commit whatever I’ve changed until the only files that remain uncommitted are in the <strong>_site</strong> subdirectory. I then stage and commit those files with a generic message that includes the current time.</p>

<h2>Commit</h2>

<p>Here’s what my commit rake task currently looks like, although I’d consult the <a href="https://github.com/davidensinger/davidensinger.github.io/blob/source/Rakefile">Rakefile</a> for a more future-proof version.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Commit _site/&quot;</span>
<span class="n">task</span> <span class="ss">:commit</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Staging modified files&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git add -A&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Committing a site build at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Build site at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git commit -m </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Pushing commits to remote&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git push origin source&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h1>Deploy</h1>

<p>Once everything is committed I go through the steps I outlined in <a href="http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages/">Deploying Jekyll with Plugins to GitHub Pages</a>. Again, I’d check the <a href="https://github.com/davidensinger/davidensinger.github.io/blob/source/Rakefile">Rakefile</a> in the event I change something and forget to update this post.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Deploy _site/ to master branch&quot;</span>
<span class="n">task</span> <span class="ss">:deploy</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting master branch&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git branch -D master&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Creating new master branch and switching to it&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git checkout -b master&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing the _site subdirectory to be project root&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git filter-branch --subdirectory-filter _site/ -f&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Switching back to source branch&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git checkout source&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Pushing all branches to origin&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git push --all origin&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h2>Commit and Deploy</h2>

<p>Finally, I’ve gone ahead and combined them into one task to save myself the burden of typing two separate commands everytime I want to update my website.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Commit and deploy _site/&quot;</span>
<span class="n">task</span> <span class="ss">:commit_deploy</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:commit</span><span class="p">,</span> <span class="ss">:deploy</span><span class="o">]</span> <span class="k">do</span>
<span class="k">end</span>
</code></pre></div>


<h2>What’s Next?</h2>

<p>Not only have I automated the deployment of my site, but I’ve also used Rake to create development and production builds. This has allowed me to implement Sass source maps and easily minify my assets, which I’ll detail in subsequent posts! Stay tuned :)</p>
 ]]></content></entry><entry><title type="text">Why I use EditorConfig</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/07/why-i-use-editorconfig/"/><id>http://davidensinger.com/2013/07/why-i-use-editorconfig</id><published>2013-07-16T06:12:00Z</published><updated>2013-07-16T06:12:00Z</updated><content type="html"><![CDATA[ <p>Have you ever found yourself switching between projects with vastly different <a href="http://en.wikipedia.org/wiki/Programming_style">coding styles</a> or (gasp!) no consistent style at all? Most editors and IDEs allow for settings at both the user and project level, but neither of those options are ideal. Often there isn’t a settings file for the project and even if there were, it’s probably for an editor that you don’t use. The only other option is to have the editor auto-detect the settings, but that’s far from perfect.</p>

<h2>Enter EditorConfig</h2>

<p>Thankfully, help has arrived in the form of <a href="http://editorconfig.org/">EditorConfig</a>, which is a file wherein one may define and then maintain a consistent coding style.</p>

<p>A description of the project:</p>

<blockquote><p>EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of <strong>a file format</strong> for defining coding styles and a collection of <strong>text editor plugins</strong> that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.</p>

<p><cite><a href="http://editorconfig.org/#overview">EditorConfig</a></cite></p></blockquote>

<h2>Example EditorConfig file</h2>

<p>The following is the <a href="https://github.com/davidensinger/davidensinger.github.io/blob/source/.editorconfig"><code>.editorconfig</code></a> file for this website:</p>

<div class="highlight"><pre><code class="ini"><span class="c1"># This file is for unifying the coding style for different editors and IDEs.</span>
<span class="c1"># More information at http://EditorConfig.org</span>

<span class="c1"># No .editorconfig files above the root directory</span>
<span class="na">root</span> <span class="o">=</span> <span class="s">true</span>

<span class="k">[*]</span>
<span class="na">indent_style</span> <span class="o">=</span> <span class="s">space</span>
<span class="na">end_of_line</span> <span class="o">=</span> <span class="s">lf</span>
<span class="na">charset</span> <span class="o">=</span> <span class="s">utf-8</span>
<span class="na">trim_trailing_whitespace</span> <span class="o">=</span> <span class="s">true</span>
<span class="na">insert_final_newline</span> <span class="o">=</span> <span class="s">true</span>

<span class="c1"># Use 2 spaces for indentation in HTML, JavaScript, Ruby, SCSS, and XML</span>

<span class="k">[*.{html,js,rb,scss,xml}]</span>
<span class="na">indent_size</span> <span class="o">=</span> <span class="s">2</span>

<span class="k">[Gemfile*]</span>
<span class="na">indent_size</span> <span class="o">=</span> <span class="s">2</span>

<span class="k">[Rakefile]</span>
<span class="na">indent_size</span> <span class="o">=</span> <span class="s">2</span>

<span class="c1"># Use 4 spaces for indentation in Markdown files</span>

<span class="k">[*.md]</span>
<span class="na">indent_size</span> <span class="o">=</span> <span class="s">4</span>
</code></pre></div>


<h2>Supported Properties</h2>

<p>Here’s a shortlist of supported properties. See the <a href="http://editorconfig.org/#supported-properties">project’s website</a> for an exhaustive list, although note that not all browser plugins support all properties.</p>

<ul>
<li>Indent style</li>
<li>Indent size</li>
<li>End of line</li>
<li>Trim trailing whitespace</li>
<li>Insert final newline</li>
</ul>


<h2>Editor and IDE Support</h2>

<p>There are plugins available for a host of editors and IDEs, although there are unfortunately some notable exceptions. I’m glad that my preferred editor, Sublime Text 2, <a href="https://github.com/sindresorhus/editorconfig-sublime">is supported</a>. It will be a glorious day in development land when there’s universal support for EditorConfig.</p>

<p>It’s 2013, so why are we still debating tabs versus spaces?! Set a standard and stick with it.</p>
 ]]></content></entry><entry><title type="text">My Favorite Chrome Extensions for Development</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/06/my-favorite-chrome-extensions-for-development/"/><id>http://davidensinger.com/2013/06/my-favorite-chrome-extensions-for-development</id><published>2013-06-14T09:20:00Z</published><updated>2013-06-14T09:20:00Z</updated><content type="html"><![CDATA[ <p>In keeping with the spirit of <a href="http://davidensinger.com/2013/05/my-favorite-web-development-software/">my favorite software for development</a>, I present my favorite <a href="http://www.google.com/chrome">Google Chrome</a> extensions. While there are no shortage of blog posts about <a href="https://chrome.google.com/webstore/category/extensions">Chrome extensions</a>, I’ll only list the ones I actually use to keep this post from turning into a bloated roundup of links.</p>

<p>I currently have six extensions enabled for development and I suspect that I rely on so few because Chrome comes with such powerful <a href="https://developers.google.com/chrome-developer-tools/">DevTools</a>. The vast majority of the in-browser functionality I use is provided out of the box, so I only need to supplement with a smattering of extensions. So without further ado…</p>

<h2>PageSpeed Insights (by Google)</h2>

<p>The <a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">PageSpeed Insights</a> extension is actually an extension for the aforementioned Developer Tools. It evaluates the performance of websites and gives suggestions for improvement. It’s useful for diagnosing problems and I find that it often reminds me to optimize when I forget.</p>

<h2>Resolution Test</h2>

<p><a href="https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal">Resolution Test</a> allows for quick changes to the dimensions of the browser window, which lets developers easily preview their websites in different screen resolutions. It also includes a list of commonly used resolutions with the added ability to customize that list. I often use it while debugging CSS within media queries.</p>

<h2>Responsive Inspector</h2>

<p>The <a href="https://chrome.google.com/webstore/detail/responsive-inspector/memcdolmmnmnleeiodllgpibdjlkbpim">Responsive Inspector</a> extension displays website media queries. It’s really helpful when developing responsively as it shows what resolutions are defined in the stylesheets. It’s also quick and easy to resize the browser to fit the media queries.</p>

<h2>User-Agent Switcher for Chrome</h2>

<p><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg">User-Agent Switcher for Chrome</a> quickly and easily switches between user-agent strings. The extension modifies the user-agent sent via HTTP requests as well as any JavaScript objects in the page. It’s much easier to test mobile only sites on desktop with this extension enabled.</p>

<h2>Web Developer</h2>

<p>The <a href="http://chrispederick.com/work/web-developer/">Web Developer</a> extension adds various tools to the browser, some of which are also native to Chrome and the Developer Tools. Even so, it’s helpful to have all the options in one convenient toolbar.</p>

<h2>YSlow</h2>

<p><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">YSlow</a> analyzes websites and suggests ways to improve their performance based on a set of rules for high performance sites. It also offers suggestions for improving performance and displays statistics about the site too. It’s a nice tool to use in conjunction with PageSpeed Insights.</p>

<p>Like always, if anyone has any suggestions for good extensions, please don’t hesitate to <a href="http://twitter.com/DavidEnsinger">tweet</a> at me!</p>
 ]]></content></entry></feed>