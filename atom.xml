<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text" xml:lang="en">Development, design, and more by David Ensinger</title><link type="application/atom+xml" rel="self" href="http://davidensinger.com/atom.xml"/><link href="http://davidensinger.com/"/><id>http://davidensinger.com/</id><updated>2014-07-30T20:37:59Z</updated><author><name>David Ensinger</name><email>hello@davidensinger.com</email></author><rights type="text">Copyright © 2014 David Ensinger. All rights reserved.</rights><entry><title type="text">Fun with JSTL in JSPs</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2014/07/fun-with-jstl-in-jsps/"/><id>http://davidensinger.com/2014/07/fun-with-jstl-in-jsps</id><published>2014-07-30T11:57:00Z</published><updated>2014-07-30T11:57:00Z</updated><content type="html"><![CDATA[ <p>It’s often difficult to find good documentation for JSTL. It’s either too technical or is so poorly designed that you swear you’re browsing within an enterprise Java intranet (is anyone surprised?). Since I’ve often found myself searching for the same information over and again, I’ve taken the time to write down the features I use most frequently.</p>

<h2>Comments</h2>

<p>To comment out code, it’s preferable to use hidden comments, which don’t get printed:</p>

<pre><code>&lt;%-- This will never been seen on production. --%&gt;
&lt;!-- But this will, although why would you want that? --&gt;
</code></pre>

<h2>Operators</h2>

<p>Both arithmetic and logical operators are supported:</p>

<table>
  <caption>Table of Operators:</caption>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>.</td>
      <td>Access a bean property or Map entry</td>
    </tr>
    <tr>
      <td>[]</td>
      <td> Access an array or List element</td>
    </tr>
    <tr>
      <td>( )</td>
      <td> Group a subexpression to change the evaluation order</td>
    </tr>
    <tr>
      <td>+</td>
      <td>Addition</td>
    </tr>
    <tr>
      <td>-</td>
      <td> Subtraction or negation of a value</td>
    </tr>
    <tr>
      <td>*</td>
      <td> Multiplication</td>
    </tr>
    <tr>
      <td>/ or div</td>
      <td> Division</td>
    </tr>
    <tr>
      <td>% or mod</td>
      <td> Modulo (remainder)</td>
    </tr>
    <tr>
      <td>== or eq</td>
      <td> Test for equality</td>
    </tr>
    <tr>
      <td>!= or ne</td>
      <td> Test for inequality</td>
    </tr>
    <tr>
      <td>&lt; or lt</td>
      <td>Test for less than</td>
    </tr>
    <tr>
      <td>&gt; or gt</td>
      <td> Test for greater than</td>
    </tr>
    <tr>
      <td>&lt;= or le</td>
      <td>Test for less than or equal</td>
    </tr>
    <tr>
      <td>&gt;= or gt</td>
      <td>Test for greater than or equal</td>
    </tr>
    <tr>
      <td>&amp;&amp; or and</td>
      <td>Test for logical AND</td>
    </tr>
    <tr>
      <td>|| or or</td>
      <td> Test for logical OR</td>
    </tr>
    <tr>
      <td>! or not</td>
      <td> Unary Boolean complement</td>
    </tr>
    <tr>
      <td>empty </td>
      <td>Test for empty variable values</td>
    </tr>
  </tbody>
</table>


<h2>Set</h2>

<p>Use the <code>set</code> tag to create a new variable or assign a value to a new or existing variable.</p>

<table>
  <caption>Table of Attributes:</caption>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Description </th>
      <th>Required</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>value</td>
      <td>Information to save</td>
      <td>No</td>
      <td>body</td>
    </tr>
    <tr>
      <td>target</td>
      <td>Name of the variable whose property should be modified</td>
      <td>No</td>
      <td>None</td>
    </tr>
    <tr>
      <td>property</td>
      <td>Property to modify</td>
      <td>No</td>
      <td>None</td>
    </tr>
    <tr>
      <td>var</td>
      <td>Name of the variable to store information</td>
      <td>No</td>
      <td>None</td>
    </tr>
    <tr>
      <td>scope</td>
      <td>Scope of variable to store information</td>
      <td>No</td>
      <td>Page</td>
    </tr>
  </tbody>
</table>


<h3>An Example</h3>

<p>The following two variables have their respective values assigned with <code>set</code>:</p>

<pre><code>&lt;c:set var="maxTopics" value="3" /&gt;
&lt;c:set var="displayClass" value="hiddenTablet" /&gt;
</code></pre>

<p>We’d then be able to use the variables like so, <code>${maxTopics}</code> and <code>${displayClass}</code> within our JSP.</p>

<h2>If</h2>

<p>To evaluate an expression, use an <code>if</code> tag. If the condition is true, it will display the body content.</p>

<table>
  <caption>Table of Attributes:</caption>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Description </th>
      <th>Required</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>test</td>
      <td>Condition to evaluate</td>
      <td>Yes</td>
      <td>None</td>
    </tr>
    <tr>
      <td>var</td>
      <td>Name of the variable to store the condition's result</td>
      <td>No</td>
      <td>None</td>
    </tr>
    <tr>
      <td>scope</td>
      <td>Scope of the variable to store the condition's result</td>
      <td>No</td>
      <td>page</td>
    </tr>
  </tbody>
</table>


<h3>An Example</h3>

<p>In the following example of an author profile component, we test if the author has a photo and if so, we print it out:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;c c-authorProfile&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;authorProfile-heading&quot;</span><span class="nt">&gt;</span>${authorProfile.fullName}<span class="nt">&lt;/h4&gt;</span>
  <span class="nt">&lt;c:if</span> <span class="na">test=</span><span class="s">&quot;${authorHasPhoto}&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;${authorProfile.photo}&quot;</span> <span class="na">alt=</span><span class="s">&quot;A photo of ${authorProfile.fullName}&quot;</span> <span class="na">class=</span><span class="s">&quot;authorProfile-photo&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/c:if&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;authorProfile-biography&quot;</span><span class="nt">&gt;</span>
    ${authorProfile.biography}
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>


<h2>Choose</h2>

<p>Much like a <strong>switch</strong> of <strong>if else</strong> statement, <code>choose</code> allows you to evaluate multiple conditions by using a combination of <code>when</code> and <code>otherwise</code> tags.</p>

<h3>An Example</h3>

<p>This media object component tests if there’s a photo, or a video, or neither and then prints out the appropriate markup:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;c c-mediaObject&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;mediaObject-heading&quot;</span><span class="nt">&gt;</span>${mediaObject.heading}<span class="nt">&lt;/h4&gt;</span>
  <span class="nt">&lt;c:choose&gt;</span>
    <span class="nt">&lt;c:when</span> <span class="na">test=</span><span class="s">&quot;${mediaObject.hasPhoto}&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;${mediaObject.photo}&quot;</span> <span class="na">alt=</span><span class="s">&quot;${mediaObject.description}&quot;</span> <span class="na">class=</span><span class="s">&quot;mediaObject-photo&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/c:when&gt;</span>
    <span class="nt">&lt;c:when</span> <span class="na">test=</span><span class="s">&quot;${mediaObject.hasVideo}&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;video</span> <span class="na">controls</span> <span class="na">class=</span><span class="s">&quot;mediaObject-video&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">&quot;${mediaObject.video}&quot;</span> <span class="na">type=</span><span class="s">&quot;video/mp4&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/video&gt;</span>
    <span class="nt">&lt;/c:when&gt;</span>
    <span class="nt">&lt;c:otherwise&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;author-warning&quot;</span><span class="nt">&gt;</span>Hey did you forget to author a photo or video? If not, perhaps a different component would be more appropriate.<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/c:otherwise&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;mediaObject-text&quot;</span><span class="nt">&gt;</span>
      ${mediaObject.text}
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/c:choose&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>


<h2>Ternary Operations</h2>

<p>A ternary operator, which allows for an inline condition that evaluates to true or false:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html">${condition ? &#39;when_true&#39; : &#39;when_false&#39;}</code></pre></div>


<h3>A Couple Examples</h3>

<p>Using a ternary operator is useful within a template because it allows for the addition of classes for use as styling hooks.</p>

<p>Here we use a ternary operator to print classes that denote whether the layout is one or two columns:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;t t-${templateName} ${hasTwoColumnsLayout ? &#39;l-twoColumns&#39; : &#39;l-oneColumn&#39;}&quot;</span><span class="nt">&gt;</span>
  …
<span class="nt">&lt;/body&gt;</span></code></pre></div>


<p>It may also be helpful to print out inline styles, although be weary about relying on this too often, as CSS should really be kept in stylesheets.</p>

<p>In this example we change the background color of the component to red when it’s not authored:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;c c-${componentName}&quot;</span> <span class="na">style=</span><span class="s">&quot;${componentNeedsAuthoring ? &#39;background-color: red&#39; : &#39;&#39;}&quot;</span><span class="nt">&gt;</span>
  …
<span class="nt">&lt;/div&gt;</span></code></pre></div>


<h2>For Each</h2>

<p>To iterate over a collection, use a <code>forEach</code> tag. There are a half-dozen attributes for use with the <code>forEach</code> tag and they can provide quite a bit of flexibility.</p>

<table>
  <caption>Table of Attributes:</caption>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Description </th>
      <th>Required</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>items</td>
      <td>Information to loop over</td>
      <td>No</td>
      <td>None</td>
    </tr>
    <tr>
      <td>begin</td>
      <td>Element to start with (0 = first item, 1 = second item, …)</td>
      <td>No</td>
      <td>0</td>
    </tr>
    <tr>
      <td>end</td>
      <td>Element to end with (0 = first item, 1 = second item, …)</td>
      <td>No</td>
      <td>Last element</td>
    </tr>
    <tr>
      <td>step</td>
      <td>Process every step items</td>
      <td>No</td>
      <td>1</td>
    </tr>
    <tr>
      <td>var</td>
      <td>Name of the variable to expose the current item</td>
      <td>No</td>
      <td>None</td>
    </tr>
    <tr>
      <td>varStatus</td>
      <td>Name of the variable to expose the loop status</td>
      <td>No</td>
      <td>None</td>
    </tr>
  </tbody>
</table>


<h3>An Example</h3>

<p>Here we have a component that displays an unordered list of links:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;c c-linkList&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;linkList-heading&quot;</span><span class="nt">&gt;</span>${linkList.heading}<span class="nt">&lt;/h4&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;linkList-list&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;c:forEach</span> <span class="na">var=</span><span class="s">&quot;link&quot;</span> <span class="na">items=</span><span class="s">&quot;${linkList.links}&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;linkList-item&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;${link.href}&quot;</span> <span class="na">class=</span><span class="s">&quot;linkList-link&quot;</span><span class="nt">&gt;</span>${link.text}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;/c:forEach&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>


<h2>forEach varStatus Properties</h2>

<p>The <code>varStatus</code> attribute comes with some helpful properties.</p>

<table>
  <caption>Table of varStatus Properties:</caption>
  <thead>
    <tr>
      <th>Property</th>
      <th>Getter</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>current</td>
      <td>getCurrent()</td>
      <td>The item (from the collection) for the current round of iteration</td>
    </tr>
    <tr>
      <td>index</td>
      <td>getIndex()</td>
      <td>The zero-based index for the current round of iteration</td>
    </tr>
    <tr>
      <td>count</td>
      <td>getCount()</td>
      <td>The one-based count for the current round of iteration</td>
    </tr>
    <tr>
      <td>first</td>
      <td>isFirst()</td>
      <td>Flag indicating whether the current round is the first pass through the iteration</td>
    </tr>
    <tr>
      <td>last</td>
      <td>isLast()</td>
      <td>Flag indicating whether the current round is the last pass through the iteration</td>
    </tr>
    <tr>
      <td>begin</td>
      <td>getBegin()</td>
      <td>The value of the begin attribute</td>
    </tr>
    <tr>
      <td>end</td>
      <td>getEnd()</td>
      <td>The value of the end attribute</td>
    </tr>
    <tr>
      <td>step</td>
      <td>getStep()</td>
      <td>The value of the step attribute</td>
    </tr>
  </tbody>
</table>


<h3>An Example</h3>

<p>A couple useful properties are <code>first</code> and <code>last</code>, which are used to delimit a list of authors in the following example from a byline component:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;c c-authorByline&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;c:forEach</span> <span class="na">var=</span><span class="s">&quot;author&quot;</span> <span class="na">items=</span><span class="s">&quot;${site.authors}&quot;</span> <span class="na">varStatus=</span><span class="s">&quot;status&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;author-byline&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;c:if</span> <span class="na">test=</span><span class="s">&quot;${status.first and not status.last}&quot;</span><span class="nt">&gt;</span>by<span class="nt">&lt;/c:if&gt;</span>
      <span class="nt">&lt;c:if</span> <span class="na">test=</span><span class="s">&quot;${not status.first and status.last}&quot;</span><span class="nt">&gt;</span>and<span class="nt">&lt;/c:if&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;${author.linkHref}&quot;</span> <span class="na">class=</span><span class="s">&quot;author-byline--link&quot;</span><span class="nt">&gt;</span>${author.fullName}<span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;c:if</span> <span class="na">test=</span><span class="s">&quot;${not status.first and not status.last}&quot;</span><span class="nt">&gt;</span>,<span class="nt">&lt;/c:if&gt;</span>
    <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/c:forEach&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>


<h2>Functions</h2>

<p>There are a lot of standard functions included in JSTL, although you probably shouldn’t use them. The majority of the functionality they provide is either better done in the model (and not the view) or can be accomplished with CSS. I very seldom find myself using anything other <code>fn:length()</code>, which I use to find the number of items in a collection.</p>

<table>
  <caption>Table of Functions:</caption>
  <thead>
    <tr>
      <th>Function</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>fn:contains()</td>
      <td>Tests if an input string contains the specified substring.</td>
    </tr>
    <tr>
      <td>fn:containsIgnoreCase()</td>
      <td>Tests if an input string contains the specified substring in a case insensitive way.</td>
    </tr>
    <tr>
      <td>fn:endsWith()</td>
      <td>Tests if an input string ends with the specified suffix.</td>
    </tr>
    <tr>
      <td>fn:escapeXml()</td>
      <td>Escapes characters that could be interpreted as XML markup.</td>
    </tr>
    <tr>
      <td>fn:indexOf()</td>
      <td>Returns the index withing a string of the first occurrence of a specified substring.</td>
    </tr>
    <tr>
      <td>fn:join()</td>
      <td>Joins all elements of an array into a string.</td>
    </tr>
    <tr>
      <td>fn:length()</td>
      <td>Returns the number of items in a collection, or the number of characters in a string.</td>
    </tr>
    <tr>
      <td>fn:replace()</td>
      <td>Returns a string resulting from replacing in an input string all occurrences with a given string.</td>
    </tr>
    <tr>
      <td>fn:split()</td>
      <td>Splits a string into an array of substrings.</td>
    </tr>
    <tr>
      <td>fn:startsWith()</td>
      <td>Tests if an input string starts with the specified prefix.</td>
    </tr>
    <tr>
      <td>fn:substring()</td>
      <td>Returns a subset of a string.</td>
    </tr>
    <tr>
      <td>fn:substringAfter()</td>
      <td>Returns a subset of a string following a specific substring.</td>
    </tr>
    <tr>
      <td>fn:substringBefore()</td>
      <td>Returns a subset of a string before a specific substring.</td>
    </tr>
    <tr>
      <td>fn:toLowerCase()</td>
      <td>Converts all of the characters of a string to lower case.</td>
    </tr>
    <tr>
      <td>fn:toUpperCase()</td>
      <td>Converts all of the characters of a string to upper case.</td>
    </tr>
    <tr>
      <td>fn:trim()</td>
      <td>Removes white spaces from both ends of a string.</td>
    </tr>
  </tbody>
</table>


<h3>An Example</h3>

<p>In the following example we only print out the search results if there are more than zero, otherwise we tell the user to try a different search term.</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;c c-siteSearch&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;siteSearch-heading&quot;</span><span class="nt">&gt;</span>${siteSearch.heading}<span class="nt">&lt;/h4&gt;</span>
  <span class="nt">&lt;c:choose&gt;</span>
    <span class="nt">&lt;c:when</span> <span class="na">test=</span><span class="s">&quot;${fn:length(siteSearch.queryResults) &gt; 0}&quot;</span><span class="nt">&gt;</span>
      …
    <span class="nt">&lt;/c:when&gt;</span>
    <span class="nt">&lt;c:otherwise&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;siteSearch-warning&quot;</span><span class="nt">&gt;</span>Sorry your search has found no results. Please try a different query!<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/c:otherwise&gt;</span>
  <span class="nt">&lt;/c:choose&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>

 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2014/07/fun-with-jstl-in-jsps/">Fun with JSTL in JSPs</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">Transferring the DNS from Namecheap to CloudFlare for GitHub Pages</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2014/04/transferring-the-dns-from-namecheap-to-cloudflare-for-github-pages/"/><id>http://davidensinger.com/2014/04/transferring-the-dns-from-namecheap-to-cloudflare-for-github-pages</id><published>2014-04-19T12:42:00Z</published><updated>2014-04-19T12:42:00Z</updated><content type="html"><![CDATA[ <p>A couple weeks ago <a href="https://twitter.com/rose_ian">@rose_ian</a> reached out to let me know that our websites, which have the identical setup, were suffering from slow initial connection times. With some legwork Ian figured out how to markedly reduce the load time for his site by hosting his DNS with <a href="https://www.cloudflare.com/">CloudFlare</a>. What follows are the steps I took to understand the issue and make the switch to CloudFlare. I’d like to give a big thanks to Ian for his initial efforts.</p>

<div class="yellow-box">
  <p><strong>Hat Tip:</strong> <a href="http://ianrose.me/blog/2014/03/30/permanent-rediect-github-project-page/">Permanent Redirect GitHub Project Page to Custom Domain</a> by <a href="https://twitter.com/rose_ian">@rose_ian</a></p>
</div>


<h2>What’s the Issue?</h2>

<p>Within his first email, Ian included a link to <a href="http://www.webpagetest.org/result/140329_D9_NZT/1/details/">test results for davidensinger.com from Webpagetest.org</a>.</p>

<p>A quick look reveals <strong>a three second delay</strong> in loading the site, which manifests itself in the <strong>Initial Connection</strong> time, of the second request:</p>

<p><img src="http://davidensinger.com/assets/img/posts/2014-04-19-initial-webpagetest-waterfall.png" alt="Image of initial Webpagetest waterfall chart results for davidensinger.com" class="media-center"/></p>

<p>An extended look at the first request reveals our culprit, which is a <a href="http://en.wikipedia.org/wiki/HTTP_302">302 redirect</a>. We can also verify this via the <a href="https://developers.facebook.com/tools/debug">Facebook Open Graph Debugger</a>:</p>

<p><img src="http://davidensinger.com/assets/img/posts/2014-04-19-initial-facebook-debugger.png" alt="Image of initial Facebook Debugger results for davidensinger.com" class="media-center"/></p>

<h2>302 Redirects</h2>

<p>After a quick search, I found <a href="http://helloanselm.com/2014/github-pages-redirect-performance/">Analyzing the GitHub Pages Waterfall Chart</a>, wherein <a href="https://twitter.com/helloanselm">@helloanselm</a> discovers that <a href="https://pages.github.com/">GitHub Pages</a> intentionally redirects sites that are setup with DNS <code>A</code> records.</p>

<p>This is our exact setup since <a href="http://www.namecheap.com/?aff=32887">Namecheap</a> doesn’t support the <code>ALIAS</code> record, which is suggested by <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a>. For more info see my previous post on <a href="http://davidensinger.com/2013/03/setting-the-dns-for-github-pages-on-namecheap/">Setting the DNS for GitHub Pages on Namecheap</a>.</p>

<p>That said, the <code>ALIAS</code> record doesn’t have robust support amongst registrars. I don’t have a good technical understanding of DNS, so I defer to the following post for a better explanation of the potential pitfalls of the <code>ALIAS</code> record.</p>

<div class="yellow-box">
  <p><strong>Warning:</strong> <a href="https://iwantmyname.com/blog/2014/01/why-alias-type-records-break-the-internet.html">Why ALIAS-type DNS Records Break The Internet</a> by <a href="https://twitter.com/norbu09">@norbu09</a></p>
</div>


<h2>CloudFlare to the Rescue</h2>

<p>Through his research, Ian came across <a href="http://www.higherorderheroku.com/articles/cloudflare-dns-heroku/">a post at Higher Order Heroku</a> that subsequently led him to CloudFlare. It seems that a common request amongst users was for an Alias-type record to use with AWS, Heroku, and GitHub Pages. In response, CloudFlare rolled out CNAME Flattening earlier this year, which they introduced with this blog post: <a href="http://blog.cloudflare.com/introducing-cname-flattening-rfc-compliant-cnames-at-a-domains-root">Introducing CNAME Flattening</a>.</p>

<p>As previously stated, I don’t understand the DNS specification as well as I’d like, but CloudFlare seems confident that their new CNAME Flattening feature won’t break the Internet. It also won’t interfere with your <code>MX</code> records, so you need not worry about receiving your emails either. Ask Ian, as I questioned him on this point several times: “Hey still no email problems?”, to which his reply was always in the affirmative.</p>

<h3>CloudFlare Support Article</h3>

<ul>
<li><a href="https://support.cloudflare.com/hc/en-us/articles/200169056-CNAME-Flattening-RFC-compliant-support-for-CNAME-at-the-root">CNAME Flattening: RFC-compliant support for CNAME at the root</a></li>
</ul>


<h2>CloudFlare DNS Settings for GitHub Pages</h2>

<p>Okay so you’re ready to make the move to CloudFlare, right? After you sign up (you can do the free account), you’ll then want to add your site:</p>

<p><img src="http://davidensinger.com/assets/img/posts/2014-04-19-cloudflare-add-site.png" alt="Image of CloudFlare Add Site" class="media-center"/></p>

<p>Once CloudFlare finishes importing your DNS records, you’ll then want to delete both of your <code>A</code> records and replace them with one <code>CNAME</code> that points to your <strong>username.github.io</strong>. Use the <strong>@</strong> symbol to denote your root domain:</p>

<p><img src="http://davidensinger.com/assets/img/posts/2014-04-19-cloudflare-cname-for-github-pages.png" alt="Image of CloudFlare CNAME settings for GitHub Pages" class="media-center"/></p>

<p>You should then have the following two <code>CNAME</code> records, amongst whatever other DNS records you may have:</p>

<p><img src="http://davidensinger.com/assets/img/posts/2014-04-19-cloudflare-dns-settings-for-github-pages.png" alt="Image of CloudFlare DNS settings for GitHub Pages" class="media-center"/></p>

<p>Once you’ve finished modifying your DNS records with CloudFlare, you’ll want to transfer your DNS away from Namecheap.</p>

<h2>Transfering DNS from Namecheap to CloudFlare</h2>

<p>To transfer your DNS to CloudFlare, login to your Namecheap account, select the appropriate domain name, and then go to <strong>Transfer DNS to Webhost</strong>. You’ll see the following screen:</p>

<p><img src="http://davidensinger.com/assets/img/posts/2014-04-19-namecheap-transfer-dns.png" alt="Image of transferring DNS from Namecheap to CloudFlare" class="media-center"/></p>

<p>Please note that the nameservers that I used, <strong>gail.ns.cloudflare.com</strong> and <strong>hugh.ns.cloudflare.com</strong>, may not be the nameservers that you’ll need to use with CloudFlare.</p>

<h2>So Did It Work?</h2>

<p>After a few days with the new DNS settings at CloudFlare, I’m happy to report that the site loads much faster. The 302 redirect is gone, which reduces the <strong>Initial Connection</strong> time and subsequently the <strong>Time to First Byte</strong>:</p>

<p><img src="http://davidensinger.com/assets/img/posts/2014-04-19-current-webpagetest-waterfall.png" alt="Image of initial Webpagetest waterfall chart results for davidensinger.com" class="media-center"/></p>

<p>I’m pleased with the new results, although I’m unsure how this affects the site from the perspective of GitHub Pages. I know they offer <a href="https://github.com/blog/1715-faster-more-awesome-github-pages">protection against denial of service attacks</a>, but I don’t know if adding CloudFlare into the mix affects this in any way. If anybody has any perspective on this, please <a href="https://twitter.com/DavidEnsinger">let me know</a>.</p>

<div class="gray-box">
  <p><strong>More Info:</strong> DNSimple has a good write up about the <a href="http://support.dnsimple.com/articles/differences-between-a-cname-alias-url/">Differences between the A, CNAME, ALIAS and URL records</a>.</p>
</div>

 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2014/04/transferring-the-dns-from-namecheap-to-cloudflare-for-github-pages/">Transferring the DNS from Namecheap to CloudFlare for GitHub Pages</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">How to Include a Footer in your Site’s Feed for Jekyll</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2014/03/how-to-include-a-footer-in-your-sites-feed-for-jekyll/"/><id>http://davidensinger.com/2014/03/how-to-include-a-footer-in-your-sites-feed-for-jekyll</id><published>2014-03-17T08:46:00Z</published><updated>2014-03-17T08:46:00Z</updated><content type="html"><![CDATA[ <p>Lots of folks read blogs via syndicated feeds, so it can’t hurt to provide them with a little additional content, whether it be a link to the original post, a copyright statement, or even links your social media profiles, in the footer of each feed entry.</p>

<h2>Example Footer for Feed Entry</h2>

<p>The first step is to create an include for your entry footer, within which you’ll put whatever content you’d like your readers to see.</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;hr&gt;</span>
<span class="nt">&lt;p&gt;</span>You’ve just read about <span class="nt">&lt;strong&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ site.url }}{{ post.url }}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/strong&gt;</span> on <span class="nt">&lt;strong&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ site.url }}/&quot;</span><span class="nt">&gt;</span>{{ site.title }}<span class="nt">&lt;/a&gt;&lt;/strong&gt;</span>.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p&gt;</span>If you’d prefer to receive your updates in tweet form, please follow me on <span class="nt">&lt;strong&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://twitter.com/DavidEnsinger&quot;</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;&lt;/strong&gt;</span>, otherwise I hope you’re enjoying the feed!<span class="nt">&lt;/p&gt;</span></code></pre></div>


<p>You’ll then want to include your feed footer within the include for your feed’s entries, which will probably look a lot like the following (see the <code>{% include feed-footer.html %}</code>):</p>

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;entry&gt;</span>
  <span class="nt">&lt;title</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;</span>{{ post.title | xml_escape }}<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;alternate&quot;</span> <span class="na">type=</span><span class="s">&quot;text/html&quot;</span> <span class="na">href=</span><span class="s">&quot;{{ site.url }}{{ post.url }}&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;id&gt;</span>{{ site.url }}{{ post.id }}<span class="nt">&lt;/id&gt;</span>
  <span class="nt">&lt;published&gt;</span>{{ post.date | date: &quot;%Y-%m-%dT%H:%M:%SZ&quot; }}<span class="nt">&lt;/published&gt;</span>
  <span class="nt">&lt;updated&gt;</span>{{ post.date | date: &quot;%Y-%m-%dT%H:%M:%SZ&quot; }}<span class="nt">&lt;/updated&gt;</span>
  <span class="nt">&lt;content</span> <span class="na">type=</span><span class="s">&quot;html&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;![CDATA[ {{ post.content }} {% include feed-footer.html %} ]]&gt;</span><span class="nt">&lt;/content&gt;</span>
<span class="nt">&lt;/entry&gt;</span></code></pre></div>


<p>Also be sure to properly escape the data in your posts. I prefer to use <code>CDATA</code>, but Jekyll also comes with <a href="http://jekyllrb.com/docs/templates/#filters">a Liquid filter to escape XML</a>: <code>{{ post.content | xml_escape }}</code>.</p>
 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2014/03/how-to-include-a-footer-in-your-sites-feed-for-jekyll/">How to Include a Footer in your Site’s Feed for Jekyll</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">Image Optimization Tools Overview</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2014/02/image-optimization-tools-overview/"/><id>http://davidensinger.com/2014/02/image-optimization-tools-overview</id><published>2014-02-15T09:42:00Z</published><updated>2014-02-15T09:42:00Z</updated><content type="html"><![CDATA[ <p>Invariably, the average website gets heavier with each passing year, which results in slower page loads for visitors. Most of this increase in page weight is due to the large file sizes of images. Odds are, as a developer, you’re guilty of this slow creep too, so you should take care to optimize your images to be as lightweight as possible.</p>

<h2>Online Tools</h2>

<p>The following are available to use online, for free:</p>

<ul>
<li><a href="http://www.jpegmini.com/main/shrink_photo">JPEGmini</a>: Per the docs, “Reduces the file size of JPEG photos by up to 5X”</li>
<li><a href="http://www.smushit.com/ysmush.it/">Smush.it</a>: Process JPG, GIF, and PNG images that are up to one megabyte in size</li>
<li><a href="http://compresspng.com/">Compress PNG</a>: Automatically converts BMP, ICO, GIF, and JPG to PNG</li>
<li><a href="http://compressjpeg.com/">Compress JPEG</a>: Automatically converts BMP and PNG to JPG</li>
<li><a href="https://tinypng.com/">TinyPNG</a>: In addition, has premium plugin for Photoshop</li>
<li><a href="http://b64.io/">b64.io</a>: Optimizes PNG, JPG, GIF or SVG and then converts to Base64</li>
</ul>


<h2>Desktop Tools</h2>

<p>These are my preferred applications when optimizing images. Also I can’t believe that <strong>ImageOptim</strong> and <strong>ImageAlpha</strong> are free because <strong>they’re that good</strong>.</p>

<ul>
<li><a href="http://www.jpegmini.com/">JPEGmini</a>: An application, as well as an online tool</li>
<li><a href="http://imageoptim.com/">ImageOptim</a>: Losslessly optimizes PNG, JPG, and GIF</li>
<li><a href="http://pngmini.com/">ImageAlpha</a>: Lossy compression of 24-bit PNG</li>
</ul>


<h2>Tooling with Grunt</h2>

<p>If you’re using <a href="http://gruntjs.com/">Grunt</a> then check out <a href="http://blog.grayghostvisuals.com/grunt/image-optimization/">Optimizing Images with Grunt</a> and these plugins:</p>

<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-imagemin">grunt-contrib-imagemin</a>: Minify PNG, JPG, and GIF</li>
<li><a href="http://jamiemason.github.io/ImageOptim-CLI/">ImageOptim-CLI</a>: Uses <strong>ImageOptim</strong>, <strong>ImageAlpha</strong>, and <strong>JPEGmini</strong></li>
<li><a href="https://github.com/JamieMason/grunt-imageoptim">grunt-imageoptim</a>: A plugin for Grunt for <strong>ImageOptim-CLI</strong></li>
</ul>

 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2014/02/image-optimization-tools-overview/">Image Optimization Tools Overview</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">Current Favicon Icon Stack</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2014/02/current-favicon-icon-stack/"/><id>http://davidensinger.com/2014/02/current-favicon-icon-stack</id><published>2014-02-06T10:00:00Z</published><updated>2014-02-06T10:00:00Z</updated><content type="html"><![CDATA[ <p>Whether it’s the file format, dimensions, or browser support (amongst other concerns), it’s confusing to figure out the best icon stack for one’s website. What follows is my current preferred markup, with some recommended tools and resources.</p>

<div class="yellow-box">
  <p><strong>Please Note:</strong> This is not an exhaustive list and surely I don’t cover all possible browsers and devices. Hopefully I get the majority, though :)</p>
</div>


<h2>Favicon</h2>

<p>For the favicon, I use <a href="http://www.kodlian.com/apps/icon-slate">Icon Slate</a> to combine a 32x32px PNG with a 16x16px PNG to form the ICO, which gives me support for HiDPI devices. For optimal browser support I drop the resulting ICO into the site root with the following markup:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon.ico&quot;</span> <span class="nt">&gt;</span></code></pre></div>


<h2>iOS</h2>

<p>There are <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/MobileHIG/IconMatrix.html">half a dozen icon dimensions</a> required to support all the different iOS devices. Previously you needed to follow Apple’s naming conventions for the filenames, but these days the following markup works:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;152x152&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-152x152.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;144x144&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-144x144.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;120x120&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-120x120.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;114x114&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-114x114.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;76x76&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-76x76.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">sizes=</span><span class="s">&quot;72x72&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-72x72.png&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;apple-touch-icon-precomposed&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-57x57.png&quot;</span><span class="nt">&gt;</span></code></pre></div>


<h2>Android</h2>

<p>Seemingly older versions of Android will fallback to use the <code>apple-touch-icon-precomposed</code> icons. <a href="https://developers.google.com/chrome/mobile/docs/installtohomescreen">Newer versions of Chrome on Android</a> will use the “largest icon found in one of the following <code>&lt;link&gt;</code> tags”:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">sizes=</span><span class="s">&quot;196x196&quot;</span> <span class="na">href=</span><span class="s">&quot;/favicon-196x196.png&quot;</span><span class="nt">&gt;</span></code></pre></div>


<h2>IE</h2>

<p>For <a href="http://msdn.microsoft.com/en-us/library/ie/dn255024%28v=vs.85%29.aspx">Internet Explorer</a>, I followed the Windows 8 Tiles section of <a href="http://viget.com/inspire/designing-device-assets-templates-techniques-and-tips">Designing Device Assets: Templates and Tips</a> and came up with the following:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-TileColor&quot;</span> <span class="na">content=</span><span class="s">&quot;#FFFFFF&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-TileImage&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-144x144-ie10.png&quot;</span><span class="nt">&gt;</span>

<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-square70x70logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-128x128-ie11.png&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-square150x150logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-270x270-ie11.png&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-wide310x150logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-558x270-ie11.png&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;msapplication-square310x310logo&quot;</span> <span class="na">content=</span><span class="s">&quot;/favicon-558x558-ie11.png&quot;</span><span class="nt">/&gt;</span></code></pre></div>


<p>The former two lines of markup are for IE10, while the latter four are for IE11. See the aforementioned blog post for very helpful PSD templates.</p>

<p>That’s it! If any of this is incorrect, I’d like to know. Send me <a href="https://twitter.com/davidensinger">a tweet about it</a>!</p>
 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2014/02/current-favicon-icon-stack/">Current Favicon Icon Stack</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">Quick Mobile Testing Tips and Tricks</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/12/quick-mobile-testing-tips-and-tricks/"/><id>http://davidensinger.com/2013/12/quick-mobile-testing-tips-and-tricks</id><published>2013-12-02T05:44:00Z</published><updated>2013-12-02T05:44:00Z</updated><content type="html"><![CDATA[ <p>Have you ever needed to track down a bug in mobile, but due to circumstances found yourself without the needed browser, operating system, and/or device? It can be really frustrating, especially when working with an ever approaching deadline. Thankfully, there are many tools available to help debug in such a situation, even if using them isn’t a proper substitute for the actual device.</p>

<div class="red-box">
  <p><strong>Warning:</strong> For real, the following tools are definitely not a proper substitute for actual devices.</p>
</div>


<h2>iOS Simulator</h2>

<p>For debugging on iOS, check out the <a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html">iOS Simulator</a>, which comes packaged within <a href="https://developer.apple.com/xcode/">Xcode</a>. The simulator has different versions of both the <strong>iPhone</strong> and <strong>iPad</strong>, which can easily be rotated and scaled, to test in portrait and landscape orientations and fit onto your monitor, respectively.</p>

<p><img src="http://davidensinger.com/assets/img/posts/2013-12-02-safari.jpg" alt="Image of the iOS Simulator" class="media-center img-border" /></p>

<p>To open, go to <code>Applications &gt; Xcode (right click and “Show Package Contents”) &gt; Contents &gt; Applications &gt; iPhone Simulator</code>. Once the program is opened, you can easily add it to your the Dock.</p>

<h3>Integration with Safari Web Inspector</h3>

<p>The iOS Simulator also has integration with the <a href="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Introduction/Introduction.html">Safari Web Inspector</a>, which can be accessed from <code>Develop &gt; iPhone (or iPad) Simulator</code>.</p>

<div class="yellow-box">
  <p><strong>More Info:</strong> Here’s a great guide to <a href="http://webdesign.tutsplus.com/tutorials/workflow-tutorials/quick-tip-using-web-inspector-to-debug-mobile-safari/">Using Web Inspector to Debug Mobile Safari</a> by <a href="https://twitter.com/jimniels">@jimniels</a>.</p>
</div>


<h2>Opera Mobile Emulator</h2>

<p>Opera supports mobile debugging via their <a href="http://www.opera.com/developer/mobile-emulator">Opera Mobile Emulator</a>, which comes ready with more than a dozen presets to mimic the “defined resolution, pixel density, user interface” of popular devices. It can be paired with <a href="http://www.opera.com/dragonfly/">Opera Dragonfly</a>, a suite of developer tools.</p>

<p><img src="http://davidensinger.com/assets/img/posts/2013-12-02-opera.jpg" alt="Image of the Opera Mobile Emulator" class="media-center img-border" /></p>

<h2>Firefox</h2>

<p>The <a href="https://developer.mozilla.org/en-US/docs/Tools">Firefox Developer Tools</a> have come a long way in the past year. Amongst the many recent additions is the <a href="https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_View">Responsive Design View</a>, a tool to easily switch between viewport widths and device orientations. For additional resolutions, see <a href="https://addons.mozilla.org/en-US/firefox/addon/more-display-resolutions/">More Display Resolutions</a>.</p>

<p><img src="http://davidensinger.com/assets/img/posts/2013-12-02-firefox.jpg" alt="Image of the Responsive Design View within Firefox" class="media-center img-border" /></p>

<h3>Extensions for Firefox</h3>

<p>These extensions may be helpful as well:</p>

<ul>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/more-display-resolutions/">More Display Resolutions</a>: Adds additional resolutions to the Responsive Design View</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-switcher/">User Agent Switcher</a>: Adds a menu and toolbar button to switch the browser’s user-agent string.</li>
</ul>


<h2>Chrome</h2>

<p>The <a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a> come with a several features that are helpful when <a href="https://developers.google.com/chrome-developer-tools/docs/mobile-emulation">emulating mobile</a>:</p>

<ul>
<li>Emulate touch events (usally not present on traditional desktop devices, although this is changing)</li>
<li>Emulate device viewports</li>
<li>Network bandwidth throttling (simulate a slow connection)</li>
<li>Device orientation overrides, amongst others</li>
</ul>


<p><img src="http://davidensinger.com/assets/img/posts/2013-12-02-chrome.jpg" alt="Image of the Mobile Emulation overrides within Chrome" class="media-center img-border" /></p>

<h3>Extensions for Chrome</h3>

<p>These extensions may be helpful as well:</p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal">Resolution Test</a>: Views for different screen resolutions, with an option to define your own resolutions</li>
<li><a href="https://chrome.google.com/webstore/detail/responsive-inspector/memcdolmmnmnleeiodllgpibdjlkbpim">Responsive Inspector</a>: Inspects media queries</li>
<li><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg">User-Agent Switcher for Chrome</a>: Spoofs and mimics user-agent strings.</li>
</ul>


<p>That’s it. May your mobile debugging be better, especially when ill-equipped and under pressure!</p>
 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2013/12/quick-mobile-testing-tips-and-tricks/">Quick Mobile Testing Tips and Tricks</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">Building a Better Sitemap.xml with Jekyll</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll/"/><id>http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll</id><published>2013-11-03T11:50:00Z</published><updated>2013-11-03T11:50:00Z</updated><content type="html"><![CDATA[ <p>In the past several months I’ve made many incremental improvements to this website, including how I generate my <a href="http://davidensinger.com/sitemap.xml">Sitemap.xml</a>. While my revisions are certainly not jaw dropping, they have definitely improved the quality of my sitemap and are thus worth writing about, if only to provide a reference point to other developers. To that end, here’s a note about the changes I’ve made in my current implementation.</p>

<h2>Previous Configuration</h2>

<p>In an earlier post, <a href="http://davidensinger.com/2013/03/generating-a-sitemap-in-jekyll-without-a-plugin/">Generating a Sitemap in Jekyll without a Plugin</a>, I went over the configuration of my previous sitemap, which looked like this:</p>

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;urlset</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span><span class="nt">&gt;</span>
  {% for post in site.posts %}
    <span class="nt">&lt;url&gt;</span>
      <span class="nt">&lt;loc&gt;</span>{{ site.url }}{{ post.url }}<span class="nt">&lt;/loc&gt;</span>
      {% if post.lastmod == null %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.date | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% else %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.lastmod | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% endif %}
      <span class="nt">&lt;changefreq&gt;</span>weekly<span class="nt">&lt;/changefreq&gt;</span>
      <span class="nt">&lt;priority&gt;</span>1.0<span class="nt">&lt;/priority&gt;</span>
    <span class="nt">&lt;/url&gt;</span>
  {% endfor %}
  {% for page in site.pages %}
    {% if page.sitemap != null and page.sitemap != empty %}
      <span class="nt">&lt;url&gt;</span>
        <span class="nt">&lt;loc&gt;</span>{{ site.url }}{{ page.url }}<span class="nt">&lt;/loc&gt;</span>
        <span class="nt">&lt;lastmod&gt;</span>{{ page.sitemap.lastmod | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
        <span class="nt">&lt;changefreq&gt;</span>{{ page.sitemap.changefreq }}<span class="nt">&lt;/changefreq&gt;</span>
        <span class="nt">&lt;priority&gt;</span>{{ page.sitemap.priority }}<span class="nt">&lt;/priority&gt;</span>
       <span class="nt">&lt;/url&gt;</span>
    {% endif %}
  {% endfor %}
<span class="nt">&lt;/urlset&gt;</span></code></pre></div>


<h2>Current Configuration</h2>

<p>For my current implementation, I made the following changes:</p>

<ul>
<li>The <code>urlset</code> is much more terse as I stripped away all the attributes, save for <strong>xmlns</strong></li>
<li>All posts and pages are added to the sitemap, unless they’ve been explicitly set to be unpublished and excluded, respectively</li>
<li>The <code>changefreq</code> and <code>priority</code> elements for pages and posts may be omitted, as those elements now have fallback values.</li>
</ul>


<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;urlset</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span><span class="nt">&gt;</span>
  {% for post in site.posts %}
    {% unless post.published == false %}
    <span class="nt">&lt;url&gt;</span>
      <span class="nt">&lt;loc&gt;</span>{{ site.url }}{{ post.url }}<span class="nt">&lt;/loc&gt;</span>
      {% if post.sitemap.lastmod %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.sitemap.lastmod | date: &quot;%Y-%m-%d&quot; }}<span class="nt">&lt;/lastmod&gt;</span>
      {% elsif post.date %}
        <span class="nt">&lt;lastmod&gt;</span>{{ post.date | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% else %}
        <span class="nt">&lt;lastmod&gt;</span>{{ site.time | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% endif %}
      {% if post.sitemap.changefreq %}
        <span class="nt">&lt;changefreq&gt;</span>{{ post.sitemap.changefreq }}<span class="nt">&lt;/changefreq&gt;</span>
      {% else %}
        <span class="nt">&lt;changefreq&gt;</span>monthly<span class="nt">&lt;/changefreq&gt;</span>
      {% endif %}
      {% if post.sitemap.priority %}
        <span class="nt">&lt;priority&gt;</span>{{ post.sitemap.priority }}<span class="nt">&lt;/priority&gt;</span>
      {% else %}
        <span class="nt">&lt;priority&gt;</span>0.5<span class="nt">&lt;/priority&gt;</span>
      {% endif %}
    <span class="nt">&lt;/url&gt;</span>
    {% endunless %}
  {% endfor %}
  {% for page in site.pages %}
    {% unless page.sitemap.exclude == &quot;yes&quot; %}
    <span class="nt">&lt;url&gt;</span>
      <span class="nt">&lt;loc&gt;</span>{{ site.url }}{{ page.url | remove: &quot;index.html&quot; }}<span class="nt">&lt;/loc&gt;</span>
      {% if page.sitemap.lastmod %}
        <span class="nt">&lt;lastmod&gt;</span>{{ page.sitemap.lastmod | date: &quot;%Y-%m-%d&quot; }}<span class="nt">&lt;/lastmod&gt;</span>
      {% elsif page.date %}
        <span class="nt">&lt;lastmod&gt;</span>{{ page.date | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% else %}
        <span class="nt">&lt;lastmod&gt;</span>{{ site.time | date_to_xmlschema }}<span class="nt">&lt;/lastmod&gt;</span>
      {% endif %}
      {% if page.sitemap.changefreq %}
        <span class="nt">&lt;changefreq&gt;</span>{{ page.sitemap.changefreq }}<span class="nt">&lt;/changefreq&gt;</span>
      {% else %}
        <span class="nt">&lt;changefreq&gt;</span>monthly<span class="nt">&lt;/changefreq&gt;</span>
      {% endif %}
      {% if page.sitemap.priority %}
        <span class="nt">&lt;priority&gt;</span>{{ page.sitemap.priority }}<span class="nt">&lt;/priority&gt;</span>
      {% else %}
        <span class="nt">&lt;priority&gt;</span>0.3<span class="nt">&lt;/priority&gt;</span>
      {% endif %}
    <span class="nt">&lt;/url&gt;</span>
    {% endunless %}
  {% endfor %}
<span class="nt">&lt;/urlset&gt;</span></code></pre></div>


<h2>Front Matter</h2>

<p>I can now add the following variables, all of which are optional, to the front matter of my posts and pages:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">sitemap</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">lastmod</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2014-01-23</span>
  <span class="l-Scalar-Plain">priority</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.7</span>
  <span class="l-Scalar-Plain">changefreq</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">monthly</span>
  <span class="l-Scalar-Plain">exclude</span><span class="p-Indicator">:</span> <span class="s">&#39;yes&#39;</span></code></pre></div>


<p>As you can see, the changes I made are simple, but put together they make for a much more flexible implementation.</p>

<div class="gray-box">
  <p><strong>More Info:</strong> Visit the official <a href="http://www.sitemaps.org/">sitemaps.org</a> to learn more about the protocol.</p>
</div>

 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll/">Building a Better Sitemap.xml with Jekyll</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">Suggested Tweet Plugin for Jekyll</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/09/suggested-tweet-plugin-for-jekyll/"/><id>http://davidensinger.com/2013/09/suggested-tweet-plugin-for-jekyll</id><published>2013-09-16T12:50:00Z</published><updated>2013-09-16T12:50:00Z</updated><content type="html"><![CDATA[ <p>It’s always a really nice feeling when one sees one’s posts shared with others, usually via blog post or Tweet. In the spirit of encouraging more of this, I present to you the <a href="https://github.com/davidensinger/jekyll-suggested-tweet">Suggested Tweet</a> plugin for <a href="http://jekyllrb.com/">Jekyll</a>. With this plugin, visitors to your site need no longer grope for words while they attempt to share your content!</p>

<h2>About the Plugin</h2>

<p>The <strong>Suggested Tweet</strong> plugin is a custom <a href="http://wiki.shopify.com/Liquid">Liquid Tag</a> for <strong>Jekyll</strong> that allows for the embedding of suggested tweets via <a href="https://dev.twitter.com/docs/intents">Twitter’s Web Intents API</a>. It makes liberal use of <a href="http://richhollis.co.uk/">Rich Hollis’s</a> <a href="https://github.com/richhollis/twitter_web_intents">Twitter Web Intents Ruby Gem</a> and was lovingly made by <a href="http://2john4tv.biz/">John Colvin</a> and me.</p>

<h2>Installation</h2>

<ol>
<li>Copy <strong>suggested-tweet.rb</strong> into your site’s <strong>_plugins</strong> directory</li>
<li>Install <strong>twitter_web_intents gem</strong>, either manually or via <strong>Bundler</strong></li>
<li>Add desired parameters to <strong>_config.yml</strong></li>
<li>Add desired parameters to <strong>YAML front-matter</strong> of page</li>
<li>Add <code>{% suggested_tweet %}</code> tag to your post or template.</li>
</ol>


<h2>Configuration</h2>

<p>The following parameters may be set globally in <strong>_config.yml</strong> or on a per page basis in the <strong>YAML front-matter</strong>. Parameters set in the <strong>YAML front-matter</strong> take precedence over those set in <strong>_config.yml</strong>. Note that all parameters are optional, although be sure to set at least one!</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">suggested_tweet</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span>                  <span class="s">&#39;http://davidensinger.com/&#39;</span>
  <span class="l-Scalar-Plain">via</span><span class="p-Indicator">:</span>                  <span class="s">&#39;davidensinger&#39;</span>
  <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span>                 <span class="s">&#39;Hello</span><span class="nv"> </span><span class="s">world&#39;</span>
  <span class="l-Scalar-Plain">in_reply_to</span><span class="p-Indicator">:</span>          <span class="l-Scalar-Plain">331434728957833218</span>
  <span class="l-Scalar-Plain">hashtags</span><span class="p-Indicator">:</span>             <span class="p-Indicator">[</span><span class="s">&#39;Jekyll&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;Twitter&#39;</span><span class="p-Indicator">]</span>
  <span class="l-Scalar-Plain">related</span><span class="p-Indicator">:</span>              <span class="p-Indicator">[</span><span class="s">&#39;davidensinger&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;richhollis&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;2john4tv&#39;</span><span class="p-Indicator">]</span></code></pre></div>


<h2>Usage</h2>

<p>Put the custom Liquid tag anywhere you want, whether that be within a post, layout, or include:</p>

<p><code>{% suggested_tweet %}</code></p>

<h2>Output</h2>

<p>The tag renders as a properly encoded URL:</p>

<p><code>https://twitter.com/intent/tweet?hashtags=Jekyll,Twitter&amp;in_reply_to=331434728957833218&amp;related=davidensinger,richhollis,2john4tv&amp;text=Hello+world&amp;url=http%3A%2F%2Fdavidensinger.com&amp;via=davidensinger</code></p>

<h2>Liquid Output for Parameters</h2>

<p>Any (and all) of the parameters may be used together with the <strong>Suggested Tweet</strong> tag. These may be helpful if decide to include the tag outside of a post and in a template:</p>

<ul>
<li><strong>_config.yml:</strong> <code>{{ site.suggested_tweet.text }}</code></li>
<li><strong>YAML front matter:</strong> <code>{{ page.suggested_tweet.text }}</code></li>
</ul>


<h2>A Practical Example</h2>

<p>The following block of code can be found in the footer of my <a href="https://github.com/davidensinger/davidensinger.github.io/blob/source/_layouts/post.html">posts template</a>. You’ll see that I only print out the <strong>text</strong> and <strong>hashtags</strong> parameters, even though all six variables are available to me. This is due to parameters not displaying to my liking (<strong>url</strong> and <strong>via</strong>) or not displaying at all (<strong>in_reply_to</strong> and <strong>related</strong>) and for styling purposes as well.</p>

<div class="highlight"><pre><code class="language-html" data-lang="html">{% if page.suggested_tweet %}
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;entry-meta-suggested-tweet&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-title&quot;</span><span class="nt">&gt;</span>Spread the Word<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% suggested_tweet %}&quot;</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-bubble&quot;</span><span class="nt">&gt;</span>
      {% if page.suggested_tweet.text != empty %}
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-text&quot;</span><span class="nt">&gt;</span>{{ page.suggested_tweet.text }}<span class="nt">&lt;/span&gt;</span>
      {% endif %}
      {% if page.suggested_tweet.hashtags != empty %}
        {% for hashtag in page.suggested_tweet.hashtags %}
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-hashtag&quot;</span><span class="nt">&gt;</span>#{{ hashtag }}<span class="nt">&lt;/span&gt;</span>
        {% endfor %}
      {% endif %}
    <span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;suggested-tweet-link&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% suggested_tweet %}&quot;</span> <span class="na">class=</span><span class="s">&quot;icon-left icon-twitter&quot;</span><span class="nt">&gt;</span>Click to Tweet<span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;small&gt;</span>(you may edit before posting.)<span class="nt">&lt;/small&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
{% endif %}</code></pre></div>


<h2>Roadmap</h2>

<ul>
<li>Add an option to allow for parameters to be combined if 1) they’ve been set in both <strong>_config.yml</strong> and <strong>YAML front-matter</strong> of a page and 2) they accept multiple values, such as hashtags and related</li>
<li>Allow for parameters to be set within the tag itself, but without using a regular expression to do so. Possible? Yay or nay?</li>
</ul>

 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2013/09/suggested-tweet-plugin-for-jekyll/">Suggested Tweet Plugin for Jekyll</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">How I use Reduce to Minify and Optimize Assets for Production</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/08/how-i-use-reduce-to-minify-and-optimize-assets-for-production/"/><id>http://davidensinger.com/2013/08/how-i-use-reduce-to-minify-and-optimize-assets-for-production</id><published>2013-08-04T08:19:00Z</published><updated>2013-08-04T08:19:00Z</updated><content type="html"><![CDATA[ <p>Now that I’ve set up <a href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/">my development environment with Rake</a>, I’m able to easily minify and optimize the assets I use for my site. To do this I use <a href="https://github.com/grosser/reduce">Reduce</a>, which is a fantastic Ruby gem by <a href="http://grosser.it/">Michael Grosser</a> to minify and compress CSS, HTML, JavaScript and Jpeg and PNG, amongst other formats.</p>

<h2>Why Compress Assets?</h2>

<p>The obvious benefit to minifying text and optimizing images is that it reduces filesize, so the assets load faster. This is the low hanging fruit of front end optimization and usually quite impactful on performance, despite being so easy to do.</p>

<h2>My Set Up</h2>

<p>To use Reduce I added it to my site’s project with <strong>Bundler</strong> so that I may then invoke it in my <strong>Rake</strong> task to build for production. A benefit to having separate environments for development and production is that I can delay all optimization to my production build, which saves considerable time during development.</p>

<p>I previously tried several <strong>Jekyll</strong> plugins to manage this, but didn’t like the delay between saving a file and then waiting for Jekyll to rebuild. Invariably, the bottleneck was the file compression, especially in regards to the minification of the HTML, which is perhaps due to the sheer quantity of files involved.</p>

<p>The task I invoke to minify the assets is courtesy of <a href="http://www.pacbard.tk/">Emanuele Bardelli</a>, who added the HTML compression functionality to Reduce. See <a href="https://github.com/pacbard/blog/blob/master/_rake/minify.rake">his rake task</a>, which I’ve only superficially modified:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">desc</span> <span class="s2">&quot;Minify _site/&quot;</span>
<span class="n">task</span> <span class="ss">:minify</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compressing static assets&quot;</span>
  <span class="n">original</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
  <span class="n">compressed</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;_site/**/*.*&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
    <span class="k">case</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
      <span class="k">when</span> <span class="s2">&quot;.css&quot;</span><span class="p">,</span> <span class="s2">&quot;.gif&quot;</span><span class="p">,</span> <span class="s2">&quot;.html&quot;</span><span class="p">,</span> <span class="s2">&quot;.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;.jpeg&quot;</span><span class="p">,</span> <span class="s2">&quot;.js&quot;</span><span class="p">,</span> <span class="s2">&quot;.png&quot;</span><span class="p">,</span> <span class="s2">&quot;.xml&quot;</span>
        <span class="nb">puts</span> <span class="s2">&quot;Processing: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
        <span class="n">original</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
        <span class="n">min</span> <span class="o">=</span> <span class="no">Reduce</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">min</span><span class="p">)</span>
        <span class="k">end</span>
        <span class="n">compressed</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
      <span class="k">else</span>
        <span class="nb">puts</span> <span class="s2">&quot;Skipping: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="k">end</span>
  <span class="k">end</span>
  <span class="nb">puts</span> <span class="s2">&quot;Total compression %0.2f\%&quot;</span> <span class="o">%</span> <span class="p">(((</span><span class="n">original</span><span class="o">-</span><span class="n">compressed</span><span class="p">)</span><span class="o">/</span><span class="n">original</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>


<p>How easy is that? With a simple <code>rake build:pro</code> command I’m able to build my site with production ready assets, which I then commit and deploy to GitHub.</p>
 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2013/08/how-i-use-reduce-to-minify-and-optimize-assets-for-production/">How I use Reduce to Minify and Optimize Assets for Production</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry><entry><title type="text">Easy Sass Source Maps with Development Environments and Rake</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/"/><id>http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake</id><published>2013-07-26T09:26:00Z</published><updated>2013-07-26T09:26:00Z</updated><content type="html"><![CDATA[ <p>In addition to <a href="http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/">automating the deployment of Jekyll</a>, I also wrote a couple Rake tasks to streamline the building of my site. They’re quite simple, but they allow me to have environments for both development and production. It’s now just as easy to use Sass source maps in my development environment as it is to build compressed assets for production.</p>

<h2>Source Maps in Sass</h2>

<p>So what are <a href="http://net.tutsplus.com/tutorials/tools-and-tips/source-maps-101/">Source Maps</a>? Basically they’re what link the compiled code that you see in your browser to the original source files that live in your development environment. This makes it really simple to debug code that may otherwise be quite difficult to work through.</p>

<h3>How to</h3>

<p>It’s fairly straightforward to set up source maps in Sass for viewing in Chrome. Thankfully, the process has been well documented by Tim Lucas in his article, “<a href="https://medium.com/what-i-learned-building/b4daab987fb0">Getting started with CSS sourcemaps and in-browser Sass editing</a>.” I’ll still lay out the high-level steps here, though:</p>

<ol>
<li>Install <strong>Sass 3.3+</strong></li>
<li>Run Sass with the <code>--sourcemap</code> flag</li>
<li>Enable <strong>CSS Source Maps</strong> support in <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a></li>
</ol>


<p>Once you’ve followed those steps you should be able to inspect CSS properties in DevTools and then click them to go straight to their source. Pretty neat, right?</p>

<h2>Setting up Environments with Rake</h2>

<p>Now that the source maps are working, it’s time to set up a way to switch between the compiled Sass for development and for production. To do this, I’ve created a couple tasks with Rake:</p>

<h3>Development</h3>

<p>To start my development, I use the following Rake task, which is based off the work of Nick Quaranto in “<a href="http://quaran.to/blog/2013/01/09/use-jekyll-scss-coffeescript-without-plugins/">Use Jekyll, SCSS, and CoffeeScript without plugins</a>.” The task starts Sass and Jekyll with the desired flags, although note that it must first run the <code>:recompile_sass</code> task, which I’ll go over shortly.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">desc</span> <span class="s2">&quot;Build _site/ for development&quot;</span>
<span class="n">task</span> <span class="ss">:dev</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">##  Starting Jekyll and compiling Sass with source map&quot;</span>
  <span class="n">pids</span> <span class="o">=</span> <span class="o">[</span>
    <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">),</span>
    <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;jekyll serve -w&quot;</span><span class="p">)</span>
  <span class="o">]</span>

  <span class="nb">trap</span> <span class="s2">&quot;INT&quot;</span> <span class="k">do</span>
    <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s2">&quot;INT&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pids</span>
    <span class="nb">exit</span> <span class="mi">1</span>
  <span class="k">end</span>

  <span class="kp">loop</span> <span class="k">do</span>
    <span class="nb">sleep</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<h3>Production</h3>

<p>To build for production, I use the following task, which compiles the Sass (note the <code>--style compressed</code>), builds Jekyll, and then deletes the leftover source map file for Sass. Again, the task must <code>:recompile_sass</code> before starting.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">desc</span> <span class="s2">&quot;Build _site/ for production&quot;</span>
<span class="n">task</span> <span class="ss">:pro</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compiling Sass&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;sass --style compressed assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Building Jekyll to _site/&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;jekyll build&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting Sass source map&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -f _site/assets/css/*.map&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span></code></pre></div>


<h2>Force Sass to Recompile</h2>

<p>For both my development and production Rake tasks I force Sass to recompile. I do this because Sass recompiles only when the compiled CSS has been deleted or when the Sass has been modified.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">desc</span> <span class="s2">&quot;Recompile Sass&quot;</span>
<span class="n">task</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing Sass to recompile&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;touch -m assets/scss/styles.scss&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span></code></pre></div>


<h2>Complete Tasks</h2>

<p>The following are the complete Rake tasks. You’ll notice that I’ve namespaced the build tasks, as well as invoked a minify task, which I’ll go over in a future post.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">desc</span> <span class="s2">&quot;Recompile Sass&quot;</span>
<span class="n">task</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing Sass to recompile&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;touch -m assets/scss/styles.scss&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>

<span class="n">namespace</span> <span class="ss">:build</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">&quot;Build _site/ for development&quot;</span>
  <span class="n">task</span> <span class="ss">:dev</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">##  Starting Jekyll and recompiling Sass with source map&quot;</span>
    <span class="n">pids</span> <span class="o">=</span> <span class="o">[</span>
      <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">),</span>
      <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;jekyll serve -w&quot;</span><span class="p">)</span>
    <span class="o">]</span>

    <span class="nb">trap</span> <span class="s2">&quot;INT&quot;</span> <span class="k">do</span>
      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s2">&quot;INT&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pids</span>
      <span class="nb">exit</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="kp">loop</span> <span class="k">do</span>
      <span class="nb">sleep</span> <span class="mi">1</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s2">&quot;Build _site/ for production&quot;</span>
  <span class="n">task</span> <span class="ss">:pro</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compiling Sass&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;sass --style compressed assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Building Jekyll to _site/&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;jekyll build&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;minify&quot;</span><span class="o">].</span><span class="n">invoke</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting Sass source map&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -f _site/assets/css/*.map&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>



 <br>
<hr>
<p>You’ve just read about <strong><a href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/">Easy Sass Source Maps with Development Environments and Rake</a></strong> on <strong><a href="http://davidensinger.com/">Development, design, and more by David Ensinger</a></strong>.</p>
<p>If you’d prefer to receive your updates in tweet form, please follow me on <strong><a href="https://twitter.com/DavidEnsinger">Twitter</a></strong>, otherwise I hope you’re enjoying the feed!</p>
 ]]></content></entry></feed>