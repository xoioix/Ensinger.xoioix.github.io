<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text" xml:lang="en">Posts Tagged “Rake” – Development, design, and more by David Ensinger</title><link type="application/atom+xml" rel="self" href="http://davidensinger.com/tag/rake/atom.xml"/><link href="http://davidensinger.com/"/><id>http://davidensinger.com/</id><updated>2014-02-07T16:59:11Z</updated><author><name>David Ensinger</name><email>hello@davidensinger.com</email></author><rights type="text">Copyright © 2014 David Ensinger. All rights reserved.</rights><entry><title type="text">How I use Reduce to Minify and Optimize Assets for Production</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/08/how-i-use-reduce-to-minify-and-optimize-assets-for-production/"/><id>http://davidensinger.com/2013/08/how-i-use-reduce-to-minify-and-optimize-assets-for-production</id><published>2013-08-04T08:19:00Z</published><updated>2013-08-04T08:19:00Z</updated><content type="html"><![CDATA[ <p>Now that I’ve set up <a href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/">my development environment with Rake</a>, I’m able to easily minify and optimize the assets I use for my site. To do this I use <a href="https://github.com/grosser/reduce">Reduce</a>, which is a fantastic Ruby gem by <a href="http://grosser.it/">Michael Grosser</a> to minify and compress CSS, HTML, JavaScript and Jpeg and PNG, amongst other formats.</p>

<h2>Why Compress Assets?</h2>

<p>The obvious benefit to minifying text and optimizing images is that it reduces filesize, so the assets load faster. This is the low hanging fruit of front end optimization and usually quite impactful on performance, despite being so easy to do.</p>

<h2>My Set Up</h2>

<p>To use Reduce I added it to my site’s project with <strong>Bundler</strong> so that I may then invoke it in my <strong>Rake</strong> task to build for production. A benefit to having separate environments for development and production is that I can delay all optimization to my production build, which saves considerable time during development.</p>

<p>I previously tried several <strong>Jekyll</strong> plugins to manage this, but didn’t like the delay between saving a file and then waiting for Jekyll to rebuild. Invariably, the bottleneck was the file compression, especially in regards to the minification of the HTML, which is perhaps due to the sheer quantity of files involved.</p>

<p>The task I invoke to minify the assets is courtesy of <a href="http://www.pacbard.tk/">Emanuele Bardelli</a>, who added the HTML compression functionality to Reduce. See <a href="https://github.com/pacbard/blog/blob/master/_rake/minify.rake">his rake task</a>, which I’ve only superficially modified:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Minify _site/&quot;</span>
<span class="n">task</span> <span class="ss">:minify</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compressing static assets&quot;</span>
  <span class="n">original</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
  <span class="n">compressed</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;_site/**/*.*&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
    <span class="k">case</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
      <span class="k">when</span> <span class="s2">&quot;.css&quot;</span><span class="p">,</span> <span class="s2">&quot;.gif&quot;</span><span class="p">,</span> <span class="s2">&quot;.html&quot;</span><span class="p">,</span> <span class="s2">&quot;.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;.jpeg&quot;</span><span class="p">,</span> <span class="s2">&quot;.js&quot;</span><span class="p">,</span> <span class="s2">&quot;.png&quot;</span><span class="p">,</span> <span class="s2">&quot;.xml&quot;</span>
        <span class="nb">puts</span> <span class="s2">&quot;Processing: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
        <span class="n">original</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
        <span class="n">min</span> <span class="o">=</span> <span class="no">Reduce</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">min</span><span class="p">)</span>
        <span class="k">end</span>
        <span class="n">compressed</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
      <span class="k">else</span>
        <span class="nb">puts</span> <span class="s2">&quot;Skipping: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="k">end</span>
  <span class="k">end</span>
  <span class="nb">puts</span> <span class="s2">&quot;Total compression %0.2f\%&quot;</span> <span class="o">%</span> <span class="p">(((</span><span class="n">original</span><span class="o">-</span><span class="n">compressed</span><span class="p">)</span><span class="o">/</span><span class="n">original</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>


<p>How easy is that? With a simple <code>rake build:pro</code> command I’m able to build my site with production ready assets, which I then commit and deploy to GitHub.</p>
 ]]></content></entry><entry><title type="text">Easy Sass Source Maps with Development Environments and Rake</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/"/><id>http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake</id><published>2013-07-26T09:26:00Z</published><updated>2013-07-26T09:26:00Z</updated><content type="html"><![CDATA[ <p>In addition to <a href="http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/">automating the deployment of Jekyll</a>, I also wrote a couple Rake tasks to streamline the building of my site. They’re quite simple, but they allow me to have environments for both development and production. It’s now just as easy to use Sass source maps in my development environment as it is to build compressed assets for production.</p>

<h2>Source Maps in Sass</h2>

<p>So what are <a href="http://net.tutsplus.com/tutorials/tools-and-tips/source-maps-101/">Source Maps</a>? Basically they’re what link the compiled code that you see in your browser to the original source files that live in your development environment. This makes it really simple to debug code that may otherwise be quite difficult to work through.</p>

<h3>How to</h3>

<p>It’s fairly straightforward to set up source maps in Sass for viewing in Chrome. Thankfully, the process has been well documented by Tim Lucas in his article, “<a href="https://medium.com/what-i-learned-building/b4daab987fb0">Getting started with CSS sourcemaps and in-browser Sass editing</a>.” I’ll still lay out the high-level steps here, though:</p>

<ol>
<li>Install <strong>Sass 3.3+</strong></li>
<li>Run Sass with the <code>--sourcemap</code> flag</li>
<li>Enable <strong>CSS Source Maps</strong> support in <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a></li>
</ol>


<p>Once you’ve followed those steps you should be able to inspect CSS properties in DevTools and then click them to go straight to their source. Pretty neat, right?</p>

<h2>Setting up Environments with Rake</h2>

<p>Now that the source maps are working, it’s time to set up a way to switch between the compiled Sass for development and for production. To do this, I’ve created a couple tasks with Rake:</p>

<h3>Development</h3>

<p>To start my development, I use the following Rake task, which is based off the work of Nick Quaranto in “<a href="http://quaran.to/blog/2013/01/09/use-jekyll-scss-coffeescript-without-plugins/">Use Jekyll, SCSS, and CoffeeScript without plugins</a>.” The task starts Sass and Jekyll with the desired flags, although note that it must first run the <code>:recompile_sass</code> task, which I’ll go over shortly.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Build _site/ for development&quot;</span>
<span class="n">task</span> <span class="ss">:dev</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">##  Starting Jekyll and compiling Sass with source map&quot;</span>
  <span class="n">pids</span> <span class="o">=</span> <span class="o">[</span>
    <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">),</span>
    <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;jekyll serve -w&quot;</span><span class="p">)</span>
  <span class="o">]</span>

  <span class="nb">trap</span> <span class="s2">&quot;INT&quot;</span> <span class="k">do</span>
    <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s2">&quot;INT&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pids</span>
    <span class="nb">exit</span> <span class="mi">1</span>
  <span class="k">end</span>

  <span class="kp">loop</span> <span class="k">do</span>
    <span class="nb">sleep</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>


<h3>Production</h3>

<p>To build for production, I use the following task, which compiles the Sass (note the <code>--style compressed</code>), builds Jekyll, and then deletes the leftover source map file for Sass. Again, the task must <code>:recompile_sass</code> before starting.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Build _site/ for production&quot;</span>
<span class="n">task</span> <span class="ss">:pro</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compiling Sass&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;sass --style compressed assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Building Jekyll to _site/&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;jekyll build&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting Sass source map&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -f _site/assets/css/*.map&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h2>Force Sass to Recompile</h2>

<p>For both my development and production Rake tasks I force Sass to recompile. I do this because Sass recompiles only when the compiled CSS has been deleted or when the Sass has been modified.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Recompile Sass&quot;</span>
<span class="n">task</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing Sass to recompile&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;touch -m assets/scss/styles.scss&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h2>Complete Tasks</h2>

<p>The following are the complete Rake tasks. You’ll notice that I’ve namespaced the build tasks, as well as invoked a minify task, which I’ll go over in a future post.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Recompile Sass&quot;</span>
<span class="n">task</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing Sass to recompile&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;touch -m assets/scss/styles.scss&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>

<span class="n">namespace</span> <span class="ss">:build</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">&quot;Build _site/ for development&quot;</span>
  <span class="n">task</span> <span class="ss">:dev</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">##  Starting Jekyll and recompiling Sass with source map&quot;</span>
    <span class="n">pids</span> <span class="o">=</span> <span class="o">[</span>
      <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">),</span>
      <span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;jekyll serve -w&quot;</span><span class="p">)</span>
    <span class="o">]</span>

    <span class="nb">trap</span> <span class="s2">&quot;INT&quot;</span> <span class="k">do</span>
      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s2">&quot;INT&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pids</span>
      <span class="nb">exit</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="kp">loop</span> <span class="k">do</span>
      <span class="nb">sleep</span> <span class="mi">1</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s2">&quot;Build _site/ for production&quot;</span>
  <span class="n">task</span> <span class="ss">:pro</span> <span class="o">=&gt;</span> <span class="ss">:recompile_sass</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Compiling Sass&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;sass --style compressed assets/scss/styles.scss:assets/css/styles.css&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Building Jekyll to _site/&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;jekyll build&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
    <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s2">&quot;minify&quot;</span><span class="o">].</span><span class="n">invoke</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting Sass source map&quot;</span>
    <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;rm -f _site/assets/css/*.map&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>



 ]]></content></entry><entry><title type="text">Automating Jekyll Deployment to GitHub Pages with Rake</title><link rel="alternate" type="text/html" href="http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/"/><id>http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake</id><published>2013-07-23T09:24:00Z</published><updated>2013-07-23T09:24:00Z</updated><content type="html"><![CDATA[ <p>I recently automated the deployment of my site to <strong>GitHub Pages</strong>, which is something that <a href="http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages/">I’ve wanted to do for awhile</a>. Whereas I would previously enter a string of commands into the terminal, I now use <strong>Rake</strong> to handle those commands for me.</p>

<h2>What is Rake</h2>

<p>For those who don’t know (and this was me until recently), <a href="http://rake.rubyforge.org/">Rake</a> is “a simple ruby build program with capabilities similar to make.” In other words, it’s a tool that helps automate the tedium that often comes with managing a website.</p>

<div class="gray-box">
  <p><strong>More Info:</strong> Jason Seifer has a pretty good <a href="http://jasonseifer.com/2010/04/06/rake-tutorial">Rake Tutorial</a> for developers new to Rake.</p>
</div>


<h2>My Workflow</h2>

<p>I’ve set up Jekyll to consist of two branches: <strong>source</strong> and <strong>master</strong>. The source branch consists of the entire project and as such tracks all changes, while the master branch consists solely of the compiled site, which can be found in the <strong>_site</strong> subdirectory.</p>

<p>My typical workflow is to write a post (or modify the site design) and then commit whatever I’ve changed until the only files that remain uncommitted are in the <strong>_site</strong> subdirectory. I then stage and commit those files with a generic message that includes the current time.</p>

<h2>Commit</h2>

<p>Here’s what my commit rake task currently looks like, although I’d consult the <a href="https://github.com/davidensinger/davidensinger.github.io/blob/source/Rakefile">Rakefile</a> for a more future-proof version.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Commit _site/&quot;</span>
<span class="n">task</span> <span class="ss">:commit</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Staging modified files&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git add -A&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Committing a site build at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Build site at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git commit -m </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Pushing commits to remote&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git push origin source&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h1>Deploy</h1>

<p>Once everything is committed I go through the steps I outlined in <a href="http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages/">Deploying Jekyll with Plugins to GitHub Pages</a>. Again, I’d check the <a href="https://github.com/davidensinger/davidensinger.github.io/blob/source/Rakefile">Rakefile</a> in the event I change something and forget to update this post.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Deploy _site/ to master branch&quot;</span>
<span class="n">task</span> <span class="ss">:deploy</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Deleting master branch&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git branch -D master&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Creating new master branch and switching to it&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git checkout -b master&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Forcing the _site subdirectory to be project root&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git filter-branch --subdirectory-filter _site/ -f&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Switching back to source branch&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git checkout source&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Pushing all branches to origin&quot;</span>
  <span class="n">status</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git push --all origin&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="n">status</span> <span class="p">?</span> <span class="s2">&quot;Success&quot;</span> <span class="p">:</span> <span class="s2">&quot;Failed&quot;</span>
<span class="k">end</span>
</code></pre></div>


<h2>Commit and Deploy</h2>

<p>Finally, I’ve gone ahead and combined them into one task to save myself the burden of typing two separate commands everytime I want to update my website.</p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s2">&quot;Commit and deploy _site/&quot;</span>
<span class="n">task</span> <span class="ss">:commit_deploy</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:commit</span><span class="p">,</span> <span class="ss">:deploy</span><span class="o">]</span> <span class="k">do</span>
<span class="k">end</span>
</code></pre></div>


<h2>What’s Next?</h2>

<p>Not only have I automated the deployment of my site, but I’ve also used Rake to create development and production builds. This has allowed me to implement Sass source maps and easily minify my assets, which I’ll detail in subsequent posts! Stay tuned :)</p>
 ]]></content></entry></feed>