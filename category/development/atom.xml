<?xml version="1.0"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Posts Categorized “Development” &ndash; Development, design, and more by David Ensinger</title><link href="http://davidensinger.com/"/><link type="application/atom+xml" rel="self" href="http://davidensinger.com/atom.xml"/><updated>2013-07-26T16:26:51-04:00</updated><id>http://davidensinger.com/</id><author><name>David Ensinger</name><email>hello@davidensinger.com</email></author><rights>Copyright &#169; 2013 David Ensinger. All rights reserved.</rights><entry><id>http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/07/easy-sass-source-maps-with-development-environments-and-rake/"/><title>Easy Sass Source Maps with Development Environments and Rake</title><published>2013-07-26T09:26:00-04:00</published><updated>2013-07-26T09:26:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;In addition to &lt;a href=&quot;http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/&quot;&gt;automating the deployment of Jekyll&lt;/a&gt;, I also wrote a couple Rake tasks to streamline the building of my site. They’re quite simple, but they allow me to have environments for both development and production. It’s now just as easy to use Sass source maps in my development environment as it is to build compressed assets for production.&lt;/p&gt;</p>

<p>&lt;h2&gt;Source Maps in Sass&lt;/h2&gt;</p>

<p>&lt;p&gt;So what are &lt;a href=&quot;http://net.tutsplus.com/tutorials/tools-and-tips/source-maps-101/&quot;&gt;Source Maps&lt;/a&gt;? Basically they’re what link the compiled code that you see in your browser to the original source files that live in your development environment. This makes it really simple to debug code that may otherwise be quite difficult to work through.&lt;/p&gt;</p>

<p>&lt;h3&gt;How to&lt;/h3&gt;</p>

<p>&lt;p&gt;It’s fairly straightforward to set up source maps in Sass for viewing in Chrome. Thankfully, the process has been well documented by Tim Lucas in his article, “&lt;a href=&quot;https://medium.com/what-i-learned-building/b4daab987fb0&quot;&gt;Getting started with CSS sourcemaps and in-browser Sass editing&lt;/a&gt;.” I’ll still lay out the high-level steps here, though:&lt;/p&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;Install &lt;strong&gt;Sass 3.3+&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Run Sass with the &lt;code&gt;&mdash;sourcemap&lt;/code&gt; flag&lt;/li&gt;
&lt;li&gt;Enable &lt;strong&gt;CSS Source Maps&lt;/strong&gt; support in &lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/canary.html&quot;&gt;Chrome Canary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;p&gt;Once you’ve followed those steps you should be able to inspect CSS properties in DevTools and then click them to go straight to their source. Pretty neat, right?&lt;/p&gt;</p>

<p>&lt;h2&gt;Setting up Environments with Rake&lt;/h2&gt;</p>

<p>&lt;p&gt;Now that the source maps are working, it’s time to set up a way to switch between the compiled Sass for development and for production. To do this, I’ve created a couple tasks with Rake:&lt;/p&gt;</p>

<p>&lt;h3&gt;Development&lt;/h3&gt;</p>

<p>&lt;p&gt;To start my development, I use the following Rake task, which is based off the work of Nick Quaranto in “&lt;a href=&quot;http://quaran.to/blog/2013/01/09/use-jekyll-scss-coffeescript-without-plugins/&quot;&gt;Use Jekyll, SCSS, and CoffeeScript without plugins&lt;/a&gt;.” The task starts Sass and Jekyll with the desired flags, although note that it must first run the &lt;code&gt;:recompile_sass&lt;/code&gt; task, which I’ll go over shortly.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build _site/ for development&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recompile_sass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;##  Starting Jekyll and compiling Sass with source map&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;</p>

<pre><code>&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;spawn&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;),&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;spawn&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;jekyll serve -w&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;
</code></pre>

<p>  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;</p>

<p>  &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;INT&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;</p>

<pre><code>&amp;lt;span class=&amp;quot;no&amp;quot;&amp;gt;Process&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;kill&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;INT&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;pids&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;exit&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;
</code></pre>

<p>  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;</p>

<p>  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;</p>

<pre><code>&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;sleep&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;
</code></pre>

<p>  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;Production&lt;/h3&gt;</p>

<p>&lt;p&gt;To build for production, I use the following task, which compiles the Sass (note the &lt;code&gt;&mdash;style compressed&lt;/code&gt;), builds Jekyll, and then deletes the leftover source map file for Sass. Again, the task must &lt;code&gt;:recompile_sass&lt;/code&gt; before starting.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build <em>site/ for production&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recompile_sass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Compiling Sass&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sass &mdash;style compressed assets/scss/styles.scss:assets/css/styles.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Building Jekyll to </em>site/&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Deleting Sass source map&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rm -f _site/assets/css/*.map&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Force Sass to Recompile&lt;/h2&gt;</p>

<p>&lt;p&gt;For both my development and production Rake tasks I force Sass to recompile. I do this because Sass recompiles only when the compiled CSS has been deleted or when the Sass has been modified.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Recompile Sass&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recompile_sass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Forcing Sass to recompile&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;touch -m assets/scss/styles.scss&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Complete Tasks&lt;/h2&gt;</p>

<p>&lt;p&gt;The following are the complete Rake tasks. You’ll notice that I’ve namespaced the build tasks, as well as invoked a minify task, which I’ll go over in a future post.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Recompile Sass&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recompile_sass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Forcing Sass to recompile&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;touch -m assets/scss/styles.scss&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;</p>

<p>&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:build&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build _site/ for development&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recompile_sass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;</p>

<pre><code>&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;puts&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;se&amp;quot;&amp;gt;\n&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;##  Starting Jekyll and recompiling Sass with source map&amp;amp;quot;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;pids&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;spawn&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;sass --sourcemap --watch assets/scss/styles.scss:assets/css/styles.css&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;),&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;spawn&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;jekyll serve -w&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;]&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;trap&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;INT&amp;amp;quot;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;k&amp;quot;&amp;gt;do&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;no&amp;quot;&amp;gt;Process&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;kill&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;INT&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;pids&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;exit&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;k&amp;quot;&amp;gt;end&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;kp&amp;quot;&amp;gt;loop&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;k&amp;quot;&amp;gt;do&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;sleep&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;k&amp;quot;&amp;gt;end&amp;lt;/span&amp;gt;
</code></pre>

<p>  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;</p>

<p>  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build _site/ for production&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:recompile_sass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;</p>

<pre><code>&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;puts&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;se&amp;quot;&amp;gt;\n&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;## Compiling Sass&amp;amp;quot;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;status&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;system&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;sass --style compressed assets/scss/styles.scss:assets/css/styles.css&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;puts&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;status&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;?&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;Success&amp;amp;quot;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;Failed&amp;amp;quot;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;puts&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;se&amp;quot;&amp;gt;\n&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;## Building Jekyll to _site/&amp;amp;quot;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;status&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;system&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;jekyll build&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;puts&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;status&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;?&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;Success&amp;amp;quot;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;Failed&amp;amp;quot;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;ss&amp;quot;&amp;gt;Rake&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;ss&amp;quot;&amp;gt;:Task&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;minify&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;].&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;invoke&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;puts&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;se&amp;quot;&amp;gt;\n&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;## Deleting Sass source map&amp;amp;quot;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;status&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;system&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;rm -f _site/assets/css/*.map&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;nb&amp;quot;&amp;gt;puts&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;status&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;?&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;Success&amp;amp;quot;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;&amp;amp;quot;Failed&amp;amp;quot;&amp;lt;/span&amp;gt;
</code></pre>

<p>  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/"/><title>Automating Jekyll Deployment to GitHub Pages with Rake</title><published>2013-07-23T09:24:00-04:00</published><updated>2013-07-23T09:24:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;I recently automated the deployment of my site to &lt;strong&gt;GitHub Pages&lt;/strong&gt;, which is something that &lt;a href=&quot;http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages/&quot;&gt;I’ve wanted to do for awhile&lt;/a&gt;. Whereas I would previously enter a string of commands into the terminal, I now use &lt;strong&gt;Rake&lt;/strong&gt; to handle those commands for me.&lt;/p&gt;</p>

<p>&lt;h2&gt;What is Rake&lt;/h2&gt;</p>

<p>&lt;p&gt;For those who don’t know (and this was me until recently), &lt;a href=&quot;http://rake.rubyforge.org/&quot;&gt;Rake&lt;/a&gt; is “a simple ruby build program with capabilities similar to make.” In other words, it’s a tool that helps automate the tedium that often comes with managing a website.&lt;/p&gt;</p>

<p>&lt;div class=&quot;gray-box&quot;&gt;
  &lt;p&gt;&lt;strong&gt;More Info:&lt;/strong&gt; Jason Seifer has a pretty good &lt;a href=&quot;http://jasonseifer.com/2010/04/06/rake-tutorial&quot;&gt;Rake Tutorial&lt;/a&gt; for developers new to Rake.&lt;/p&gt;
&lt;/div&gt;</p>

<p>&lt;h2&gt;My Workflow&lt;/h2&gt;</p>

<p>&lt;p&gt;I’ve set up Jekyll to consist of two branches: &lt;strong&gt;source&lt;/strong&gt; and &lt;strong&gt;master&lt;/strong&gt;. The source branch consists of the entire project and as such tracks all changes, while the master branch consists solely of the compiled site, which can be found in the &lt;strong&gt;_site&lt;/strong&gt; subdirectory.&lt;/p&gt;</p>

<p>&lt;p&gt;My typical workflow is to write a post (or modify the site design) and then commit whatever I’ve changed until the only files that remain uncommitted are in the &lt;strong&gt;_site&lt;/strong&gt; subdirectory. I then stage and commit those files with a generic message that includes the current time.&lt;/p&gt;</p>

<p>&lt;h2&gt;Commit&lt;/h2&gt;</p>

<p>&lt;p&gt;Here’s what my commit rake task currently looks like, although I’d consult the &lt;a href=&quot;https://github.com/davidensinger/davidensinger.github.io/blob/source/Rakefile&quot;&gt;Rakefile&lt;/a&gt; for a more future-proof version.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Commit _site/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Staging modified files&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git add -A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Committing a site build at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build site at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git commit -m &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Pushing commits to remote&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git push origin source&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h1&gt;Deploy&lt;/h1&gt;</p>

<p>&lt;p&gt;Once everything is committed I go through the steps I outlined in &lt;a href=&quot;http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages/&quot;&gt;Deploying Jekyll with Plugins to GitHub Pages&lt;/a&gt;. Again, I’d check the &lt;a href=&quot;https://github.com/davidensinger/davidensinger.github.io/blob/source/Rakefile&quot;&gt;Rakefile&lt;/a&gt; in the event I change something and forget to update this post.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Deploy <em>site/ to master branch&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Deleting master branch&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git branch -D master&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Creating new master branch and switching to it&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git checkout -b master&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Forcing the </em>site subdirectory to be project root&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git filter-branch &mdash;subdirectory-filter _site/ -f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Switching back to source branch&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git checkout source&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;## Pushing all branches to origin&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git push &mdash;all origin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Commit and Deploy&lt;/h2&gt;</p>

<p>&lt;p&gt;Finally, I’ve gone ahead and combined them into one task to save myself the burden of typing two separate commands everytime I want to update my website.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Commit and deploy _site/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:commit_deploy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;What’s Next?&lt;/h2&gt;</p>

<p>&lt;p&gt;Not only have I automated the deployment of my site, but I’ve also used Rake to create development and production builds. This has allowed me to implement Sass source maps and easily minify my assets, which I’ll detail in subsequent posts! Stay tuned :)&lt;/p&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/07/why-i-use-editorconfig</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/07/why-i-use-editorconfig/"/><title>Why I use EditorConfig</title><published>2013-07-16T06:12:00-04:00</published><updated>2013-07-16T06:12:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;Have you ever found yourself switching between projects with vastly different &lt;a href=&quot;http://en.wikipedia.org/wiki/Programming_style&quot;&gt;coding styles&lt;/a&gt; or (gasp!) no consistent style at all? Most editors and IDEs allow for settings at both the user and project level, but neither of those options are ideal. Often there isn’t a settings file for the project and even if there were, it’s probably for an editor that you don’t use. The only other option is to have the editor auto-detect the settings, but that’s far from perfect.&lt;/p&gt;</p>

<p>&lt;h2&gt;Enter EditorConfig&lt;/h2&gt;</p>

<p>&lt;p&gt;Thankfully, help has arrived in the form of &lt;a href=&quot;http://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;, which is a file wherein one may define and then maintain a consistent coding style.&lt;/p&gt;</p>

<p>&lt;p&gt;A description of the project:&lt;/p&gt;</p>

<p>&lt;blockquote&gt;&lt;p&gt;EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of &lt;strong&gt;a file format&lt;/strong&gt; for defining coding styles and a collection of &lt;strong&gt;text editor plugins&lt;/strong&gt; that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;cite&gt;&lt;a href=&quot;http://editorconfig.org/#overview&quot;&gt;EditorConfig&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;</p>

<p>&lt;h2&gt;Example EditorConfig file&lt;/h2&gt;</p>

<p>&lt;p&gt;The following is the &lt;a href=&quot;https://github.com/davidensinger/davidensinger.github.io/blob/source/.editorconfig&quot;&gt;&lt;code&gt;.editorconfig&lt;/code&gt;&lt;/a&gt; file for this website:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# This file is for unifying the coding style for different editors and IDEs.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# More information at http://EditorConfig.org&lt;/span&gt;</p>

<p>&lt;span class=&quot;c1&quot;&gt;# No .editorconfig files above the root directory&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;</p>

<p>&lt;span class=&quot;k&quot;&gt;[*]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;indent_style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;space&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;end_of_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;lf&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;charset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;utf-8&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;trim_trailing_whitespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;insert_final_newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;</p>

<p>&lt;span class=&quot;c1&quot;&gt;# Use 2 spaces for indentation in HTML, JavaScript, Ruby, SCSS, and XML&lt;/span&gt;</p>

<p>&lt;span class=&quot;k&quot;&gt;[*.{html,js,rb,scss,xml}]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;indent_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;</p>

<p>&lt;span class=&quot;k&quot;&gt;[Gemfile*]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;indent_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;</p>

<p>&lt;span class=&quot;k&quot;&gt;[Rakefile]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;indent_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;</p>

<p>&lt;span class=&quot;c1&quot;&gt;# Use 4 spaces for indentation in Markdown files&lt;/span&gt;</p>

<p>&lt;span class=&quot;k&quot;&gt;[*.md]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;indent_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Supported Properties&lt;/h2&gt;</p>

<p>&lt;p&gt;Here’s a shortlist of supported properties. See the &lt;a href=&quot;http://editorconfig.org/#supported-properties&quot;&gt;project’s website&lt;/a&gt; for an exhaustive list, although note that not all browser plugins support all properties.&lt;/p&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Indent style&lt;/li&gt;
&lt;li&gt;Indent size&lt;/li&gt;
&lt;li&gt;End of line&lt;/li&gt;
&lt;li&gt;Trim trailing whitespace&lt;/li&gt;
&lt;li&gt;Insert final newline&lt;/li&gt;
&lt;/ul&gt;</p>

<p>&lt;h2&gt;Editor and IDE Support&lt;/h2&gt;</p>

<p>&lt;p&gt;There are plugins available for a host of editors and IDEs, although there are unfortunately some notable exceptions. I’m glad that my preferred editor, Sublime Text 2, &lt;a href=&quot;https://github.com/sindresorhus/editorconfig-sublime&quot;&gt;is supported&lt;/a&gt;. It will be a glorious day in development land when there’s universal support for EditorConfig.&lt;/p&gt;</p>

<p>&lt;p&gt;It’s 2013, so why are we still debating tabs versus spaces?! Set a standard and stick with it.&lt;/p&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/06/my-favorite-chrome-extensions-for-development</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/06/my-favorite-chrome-extensions-for-development/"/><title>My Favorite Chrome Extensions for Development</title><published>2013-06-14T09:20:00-04:00</published><updated>2013-06-14T09:20:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;In keeping with the spirit of &lt;a href=&quot;http://davidensinger.com/2013/05/my-favorite-web-development-software/&quot;&gt;my favorite software for development&lt;/a&gt;, I present my favorite &lt;a href=&quot;http://www.google.com/chrome&quot;&gt;Google Chrome&lt;/a&gt; extensions. While there are no shortage of blog posts about &lt;a href=&quot;https://chrome.google.com/webstore/category/extensions&quot;&gt;Chrome extensions&lt;/a&gt;, I’ll only list the ones I actually use to keep this post from turning into a bloated roundup of links.&lt;/p&gt;</p>

<p>&lt;p&gt;I currently have six extensions enabled for development and I suspect that I rely on so few because Chrome comes with such powerful &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/&quot;&gt;DevTools&lt;/a&gt;. The vast majority of the in-browser functionality I use is provided out of the box, so I only need to supplement with a smattering of extensions. So without further ado…&lt;/p&gt;</p>

<p>&lt;h2&gt;PageSpeed Insights (by Google)&lt;/h2&gt;</p>

<p>&lt;p&gt;The &lt;a href=&quot;https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en&quot;&gt;PageSpeed Insights&lt;/a&gt; extension is actually an extension for the aforementioned Developer Tools. It evaluates the performance of websites and gives suggestions for improvement. It’s useful for diagnosing problems and I find that it often reminds me to optimize when I forget.&lt;/p&gt;</p>

<p>&lt;h2&gt;Resolution Test&lt;/h2&gt;</p>

<p>&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/resolution-test/idhfcdbheobinplaamokffboaccidbal&quot;&gt;Resolution Test&lt;/a&gt; allows for quick changes to the dimensions of the browser window, which lets developers easily preview their websites in different screen resolutions. It also includes a list of commonly used resolutions with the added ability to customize that list. I often use it while debugging CSS within media queries.&lt;/p&gt;</p>

<p>&lt;h2&gt;Responsive Inspector&lt;/h2&gt;</p>

<p>&lt;p&gt;The &lt;a href=&quot;https://chrome.google.com/webstore/detail/responsive-inspector/memcdolmmnmnleeiodllgpibdjlkbpim&quot;&gt;Responsive Inspector&lt;/a&gt; extension displays website media queries. It’s really helpful when developing responsively as it shows what resolutions are defined in the stylesheets. It’s also quick and easy to resize the browser to fit the media queries.&lt;/p&gt;</p>

<p>&lt;h2&gt;User-Agent Switcher for Chrome&lt;/h2&gt;</p>

<p>&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg&quot;&gt;User-Agent Switcher for Chrome&lt;/a&gt; quickly and easily switches between user-agent strings. The extension modifies the user-agent sent via HTTP requests as well as any JavaScript objects in the page. It’s much easier to test mobile only sites on desktop with this extension enabled.&lt;/p&gt;</p>

<p>&lt;h2&gt;Web Developer&lt;/h2&gt;</p>

<p>&lt;p&gt;The &lt;a href=&quot;http://chrispederick.com/work/web-developer/&quot;&gt;Web Developer&lt;/a&gt; extension adds various tools to the browser, some of which are also native to Chrome and the Developer Tools. Even so, it’s helpful to have all the options in one convenient toolbar.&lt;/p&gt;</p>

<p>&lt;h2&gt;YSlow&lt;/h2&gt;</p>

<p>&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh&quot;&gt;YSlow&lt;/a&gt; analyzes websites and suggests ways to improve their performance based on a set of rules for high performance sites. It also offers suggestions for improving performance and displays statistics about the site too. It’s a nice tool to use in conjunction with PageSpeed Insights.&lt;/p&gt;</p>

<p>&lt;p&gt;Like always, if anyone has any suggestions for good extensions, please don’t hesitate to &lt;a href=&quot;http://twitter.com/DavidEnsinger&quot;&gt;tweet&lt;/a&gt; at me!&lt;/p&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/05/my-favorite-web-development-software</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/05/my-favorite-web-development-software/"/><title>My Favorite Web Development Software</title><published>2013-05-24T08:48:00-04:00</published><updated>2013-05-24T08:48:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;I’m always interested in learning about the tools other developers use during the course of their workday. What follows is a list of my preferred software with accompanying explanations on how I use it. Hopefully this list will prove helpful to someone else! If you’ve got a suggestion for a better program, please let me know.&lt;/p&gt;</p>

<p>&lt;h2&gt;Console&lt;/h2&gt;</p>

<p>&lt;p&gt;My preferred terminal emulator is &lt;a href=&quot;http://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;, which I mainly use for the split panes and history playback (when I do something that I shouldn’t have). I’m sure I’m just scratching the surface in regards to features, though.&lt;/p&gt;</p>

<p>&lt;h2&gt;FTP Client&lt;/h2&gt;</p>

<p>&lt;p&gt;It’s not so often that I need to transfer files via FTP, but when I do I always use &lt;a href=&quot;http://cyberduck.ch/&quot;&gt;Cyberduck&lt;/a&gt;. I can’t say that it’s any better than any other popular alternative, but it’s my favorite merely for the fact that I’ve been reliably using it for a long time.&lt;/p&gt;</p>

<p>&lt;h2&gt;Icons&lt;/h2&gt;</p>

<p>&lt;p&gt;I use &lt;a href=&quot;http://www.kodlian.com/apps/icon-slate&quot;&gt;Icon Slate&lt;/a&gt; for creating, exporting, and packaging icons. The latter point is especially helpful for the creation of retina versions of favicons.&lt;/p&gt;</p>

<p>&lt;h2&gt;Image Optimization&lt;/h2&gt;</p>

<p>&lt;p&gt;To optimize images I use several different programs, the use of which depends on the file format.&lt;/p&gt;</p>

<p>&lt;p&gt;For alpha transparent PNGs I use &lt;a href=&quot;http://pngmini.com/&quot;&gt;ImageAlpha&lt;/a&gt;, which allows for the conversion of “24-bit PNG to paletted 8-bit with full alpha channel.” This markedly reduces the size of large images, with no perceptible loss of quality.&lt;/p&gt;</p>

<p>&lt;p&gt;For JPEGs I use &lt;a href=&quot;http://jpegmini.com/&quot;&gt;JPEGmini&lt;/a&gt;, which also reduces file size rather dramatically. Their proprietary algorithm is superior to Photoshop’s ”Save for Web”, so I usually process the file in JPEGmini in lieu of compressing it via Photoshop.&lt;/p&gt;</p>

<p>&lt;p&gt;Once I’ve processed the images with the aforementioned programs, I then make an attempt to further reduce the file size with &lt;a href=&quot;http://imageoptim.com/&quot;&gt;ImageOptim&lt;/a&gt;, which supports GIFs too. This latter step often reduces file size by another few percent.&lt;/p&gt;</p>

<p>&lt;h2&gt;Mobile&lt;/h2&gt;</p>

<p>&lt;p&gt;I have yet to do any native app development, but I do often create responsive designs. To test these in mobile browsers I use the &lt;strong&gt;iOS Simulator&lt;/strong&gt; (via &lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode&lt;/a&gt;) and the &lt;a href=&quot;http://www.opera.com/developer/mobile-emulator&quot;&gt;Opera Mobile Emulator&lt;/a&gt;. These programs aren’t a substitute for the actual devices, but they are a close approximation and work well for the majority of the work I do.&lt;/p&gt;</p>

<p>&lt;h2&gt;Preprocessor&lt;/h2&gt;</p>

<p>&lt;p&gt;I use &lt;a href=&quot;http://incident57.com/codekit/&quot;&gt;CodeKit&lt;/a&gt; to compile my &lt;strong&gt;Sass&lt;/strong&gt; on the occasions that I don’t feel like using the command line. The program supports a multitude of languages, including Haml, Less, and CoffeeScript. It’s also really helpful for the live browser reloads. I’m looking forward to the 2.0 release, which should be out sometime soon!&lt;/p&gt;</p>

<p>&lt;h2&gt;Productivity&lt;/h2&gt;</p>

<p>&lt;p&gt;For productivity gains within OS X, I highly recommend &lt;a href=&quot;http://mizage.com/divvy/&quot;&gt;Divvy&lt;/a&gt; for window management and
&lt;a href=&quot;https://itunes.apple.com/us/app/flycut-clipboard-manager/id442160987?mt=12&quot;&gt;Flycut&lt;/a&gt; for clipboard management. Divvy makes it easy to resize windows, which is especially useful when using multiple monitors (what a first world problem, right?). Flycut saves everything that you recently copied to the clipboard and makes it easy to cycle through to paste anew.&lt;/p&gt;</p>

<p>&lt;h2&gt;Source Control&lt;/h2&gt;</p>

<p>&lt;p&gt;For version control I prefer to use a GUI to the command line, since some tasks are easier to do through an application. I use &lt;a href=&quot;http://www.zennaware.com/cornerstone/&quot;&gt;Cornerstone&lt;/a&gt; to manage &lt;strong&gt;Subversion&lt;/strong&gt; repositories and &lt;a href=&quot;http://www.git-tower.com/&quot;&gt;Tower&lt;/a&gt; to manage &lt;strong&gt;Git&lt;/strong&gt; repositories. I’ve tried several other well known Git clients, but I like Tower the best.&lt;/p&gt;</p>

<p>&lt;h2&gt;Text Editor&lt;/h2&gt;</p>

<p>&lt;p&gt;As a front end developer I don’t typically need an integrated developing environment, so &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt; is my text editor of choice. It’s lightning fast, easily extensible, and enables me to efficiently write code with split editing and multiple selections. I’m definitely looking forward to the 3.0 release!&lt;/p&gt;</p>

<p>&lt;h2&gt;Writing&lt;/h2&gt;</p>

<p>&lt;p&gt;While not exactly an application for development, I use &lt;a href=&quot;http://www.iawriter.com/mac/&quot;&gt;iA Writer&lt;/a&gt; to write all my posts. It’s especially nice that &lt;strong&gt;Jekyll&lt;/strong&gt; comes with built in support for &lt;strong&gt;Markdown&lt;/strong&gt;, so using iA Writer only makes sense.&lt;/p&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/05/getting-started-with-sublime-text-2</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/05/getting-started-with-sublime-text-2/"/><title>Getting Started with Sublime Text 2</title><published>2013-05-14T12:12:00-04:00</published><updated>2013-05-14T12:12:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;Although I switched to &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text 2&lt;/a&gt; more than a year ago, I only recently decided to take a good look at my configuration, with the end goal of increasing my productivity. What follows are my settings, which will hopefully help others work a bit smarter. If you’ve got any useful tips, please &lt;a href=&quot;https://twitter.com/davidensinger&quot;&gt;tweet&lt;/a&gt; at me!&lt;/p&gt;</p>

<p>&lt;h2&gt;Hide Folders&lt;/h2&gt;</p>

<p>&lt;p&gt;It’s often helpful to hide folders so they’re not found when searching or using the Go to File shortcut (⌘ + T). Add the following line to your User Preferences (Preferences › Settings &amp;ndash; User or ⌘,) to do so:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;folder_exclude_patterns&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.svn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.sass-cache&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;p&gt;You can also use an asterisk to match file types instead of directories:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;folder_exclude_patterns&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;*.psd&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Open Files as Tabs&lt;/h2&gt;</p>

<p>&lt;p&gt;The default behavior is to open a file in a new window. If you&amp;rsquo;d prefer tabs, add this line to your  User Preferences (Preferences › Settings &amp;ndash; User or ⌘,):&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open_files_in_new_window&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Pasting&lt;/h2&gt;</p>

<p>&lt;p&gt;Some projects use tabs, while others use spaces. It’s nice to easily copy and paste snippets of code between the two, without worrying about the indentation.&lt;/p&gt;</p>

<p>&lt;p&gt;To adjust your indentation to match the context in which it’s pasted, use “Paste and Indent” for &lt;strong&gt;⌘V&lt;/strong&gt; instead of the standard “Paste.”&lt;/p&gt;</p>

<p>&lt;p&gt;To do this, add the following in your &lt;strong&gt;Key Bindings &amp;ndash; User file&lt;/strong&gt;:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;paste_and_indent&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;super+shift+v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;paste&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Shortcuts&lt;/h2&gt;</p>

<p>&lt;p&gt;There are a lot of really useful keyboard shortcuts in Sublime Text 2. Instead of listing them all, I’m going to list some favorites. With a quick search of the internet you’ll surely find more to integrate into your workflow.&lt;/p&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;⌘L&lt;/strong&gt; &amp;ndash; Select line&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;⌘D&lt;/strong&gt; &amp;ndash; Select word (use this to select other occurrences, which is great for multiple editing)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;⌘P&lt;/strong&gt; &amp;ndash; Goto anything (use &lt;strong&gt;#&lt;/strong&gt; to search within file and &lt;strong&gt;:&lt;/strong&gt; to go to a line number)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;⌘⌃G&lt;/strong&gt; &amp;ndash; Select all occurrences of current word (again, helpful for multiple editing)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;⌃⌘↑ (up) or ↓(down)&lt;/strong&gt; &amp;ndash; Swap lines either up or down&lt;/li&gt;
&lt;/ul&gt;</p>

<p>&lt;div class=&quot;yellow-box&quot;&gt;
  &lt;p&gt;&lt;strong&gt;More Info:&lt;/strong&gt; Here’s a &lt;a href=&quot;https://gist.github.com/lucasfais/1207002&quot;&gt;Gist of Useful Shortcuts&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/lucasfais&quot;&gt;@lucasfais&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</p>

<p>&lt;h2&gt;Package Control&lt;/h2&gt;</p>

<p>&lt;p&gt;One of the best things about Sublime Text 2 is how extensible it is. There are hundreds of community developed plugins and with &lt;a href=&quot;http://wbond.net/sublime_packages/package_control&quot;&gt;Package Control&lt;/a&gt; it’s quick and easy to install, update, and remove them from your installation.&lt;/p&gt;</p>

<p>&lt;h3&gt;Installation&lt;/h3&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;Open Sublime Text 2 and press &lt;strong&gt;ctrl `&lt;/strong&gt; (control backtick) to open the editor’s console.&lt;/li&gt;
&lt;li&gt;Paste in the following code:&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Package Control.sublime-package&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sublime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installed_packages_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install_opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://sublime.wbond.net/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;%20&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Please restart Sublime Text to finish installation&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;Favorite Packages&lt;/h3&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alienhard/SublimeAllAutocomplete&quot;&gt;All Autocomplete&lt;/a&gt; &amp;ndash; Allows autocompletion across open files&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gcollazo.github.io/BrowserRefresh-Sublime/&quot;&gt;Browser Refresh&lt;/a&gt; &amp;ndash; Refresh your browser from within the editor&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/editorconfig-sublime&quot;&gt;EditorConfig&lt;/a&gt; &amp;ndash; &lt;a href=&quot;http://editorconfig.org/&quot;&gt;Editor Config&lt;/a&gt; helps define and maintain consistent coding styles between different editors and IDEs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gornostal/Modific&quot;&gt;Modific&lt;/a&gt; -Highlight lines changed since the last commit&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/titoBouzout/SideBarEnhancements&quot;&gt;SideBarEnhancements&lt;/a&gt; &amp;ndash; Adds useful file operations to the sidebar, such as “New file”, “New folder”, etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter&quot;&gt;SublimeLinter&lt;/a&gt; &amp;ndash; Lint code as you type&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SublimeText/TrailingSpaces&quot;&gt;TrailingSpaces&lt;/a&gt; &amp;ndash; Strips trailing whitespace from files&lt;/li&gt;
&lt;/ul&gt;</p>

<p>&lt;p&gt;There are also innumerable packages to support syntax highlighting, linting, and snippets in any and all languages. You can easily &lt;a href=&quot;http://wbond.net/sublime_packages/community&quot;&gt;discover these via Package Control&lt;/a&gt;.&lt;/p&gt;</p>

<p>&lt;h2&gt;Spaces&lt;/h2&gt;</p>

<p>&lt;p&gt;Open &lt;strong&gt;TrailingSpace&amp;rsquo;s&lt;/strong&gt; preferences (&lt;strong&gt;Preferences › Package Settings › TrailingSpaces › Settings &amp;ndash; User&lt;/strong&gt;), and add:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;trailing_spaces_include_current_line&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;p&gt;Also add this to your global user preferences (&lt;strong&gt;⌘,&lt;/strong&gt;):&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Tabs to Spaces&lt;/h2&gt;</p>

<p>&lt;p&gt;The default indentation style uses tabs instead of spaces. If you want to change this, go to your user preferences (&lt;strong&gt;Preferences › Settings &amp;ndash; User&lt;/strong&gt; or &lt;strong&gt;⌘,&lt;/strong&gt;) and add:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tab_size&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;translate_tabs_to_spaces&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Other Resources&lt;/h2&gt;</p>

<p>&lt;p&gt;There are a multitude of resources available to users of Sublime Text 2. Here are some good ones to read through:&lt;/p&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/docs/2/&quot;&gt;Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.sublimetext.info/en/latest/index.html&quot;&gt;Unofficial Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.alexmaccaw.com/sublime-text&quot;&gt;Setting up Sublime Text 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://robdodson.me/blog/2012/06/23/sublime-text-2-tips-and-shortcuts/&quot;&gt;Sublime Text 2 Tips and Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://whiletruecode.com/post/7-handy-text-manipulation-tricks-sublime-text-2&quot;&gt;7 handy text manipulation tricks in Sublime Text 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/04/adding-open-graph-tags-to-jekyll</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/04/adding-open-graph-tags-to-jekyll/"/><title>Adding Open Graph Tags to Jekyll</title><published>2013-04-21T16:05:00-04:00</published><updated>2013-04-21T16:05:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;What is the &lt;a href=&quot;http://ogp.me/&quot;&gt;Open Graph&lt;/a&gt; protocol? Per &lt;strong&gt;Facebook&lt;/strong&gt;, it “enables any web page to become a rich object in a social graph.” The documentation goes on to state that “to turn your web pages into graph objects, you need to add basic metadata to your page.” Put more simply, add &lt;strong&gt;Open Graph meta tags&lt;/strong&gt; to your website to have greater control over how your content is displayed when shared via Facebook.&lt;/p&gt;</p>

<p>&lt;h2&gt;Basic Metadata&lt;/h2&gt;</p>

<p>&lt;p&gt;The basic metadata includes a &lt;strong&gt;title&lt;/strong&gt;, &lt;strong&gt;object type&lt;/strong&gt;, &lt;strong&gt;image&lt;/strong&gt;, and &lt;strong&gt;url&lt;/strong&gt;, as per the documentation:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Type&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:type&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Image&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;URL&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:url&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;p&gt;I’ve also included a &lt;strong&gt;site name&lt;/strong&gt; and &lt;strong&gt;description&lt;/strong&gt;:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Site Name&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:site_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:description&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;Object Types&lt;/h3&gt;</p>

<p>&lt;p&gt;There are many different &lt;a href=&quot;http://ogp.me/#types&quot;&gt;object types&lt;/a&gt; to which you may categorize your page: music, video, article, book, profile, and website, amongst others. The two types that are relevant to my site are &lt;strong&gt;article&lt;/strong&gt; and &lt;strong&gt;website&lt;/strong&gt;, the latter being the object type that I’ll fall back upon for every page that isn’t a post.&lt;/p&gt;</p>

<p>&lt;h4&gt;Article&lt;/h4&gt;</p>

<p>&lt;p&gt;The article object type has several possible values, but I’m only using &lt;strong&gt;article:published_time&lt;/strong&gt;, &lt;strong&gt;article:author&lt;/strong&gt;, &lt;strong&gt;article:section&lt;/strong&gt;, and &lt;strong&gt;article:tag&lt;/strong&gt; for my site:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Time&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:published_time&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Author&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:author&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Category&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:section&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Tag&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Code&lt;/h2&gt;</p>

<p>&lt;div class=&quot;yellow-box&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; I’ve skipped the explanations for some of the following conditional statements because they’re identical to those that I wrote about in my &lt;a href=&quot;http://davidensinger.com/2013/04/supporting-twitter-cards-with-jekyll/&quot;&gt;Supporting Twitter Cards with Jekyll&lt;/a&gt; post. See that post for further information.&lt;/p&gt;
&lt;/div&gt;</p>

<p>&lt;p&gt;For the categories and tags, I’m using a for loop to output the appropriate meta tags. Open Graph tags only allow for one section, so I limit that to the first category. It’s rather arbitrary, but it works.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;{% if page.categories %}
  {% for category in page.categories limit:1 %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ category }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:section&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}
{% if page.tags %}
  {% for tag in page.tags %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ tag }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;p&gt;Here’s the final snippet of code with the appropriate meta data:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.title }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:site_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% if page.title %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.title }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.title }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.title %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:type&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;website&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:type&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.description %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.description }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:description&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.description }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:description&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.url %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ page.url }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:url&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.date %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.date | date_to_xmlschema }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:published_time&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}/about/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:author&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.image %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}/assets/img/posts/{{ page.image }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}/assets/img/logo-high-resolution.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;og:image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.categories %}
  {% for category in page.categories limit:1 %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ category }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:section&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}
{% if page.tags %}
  {% for tag in page.tags %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ tag }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;article:tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Validate&lt;/h2&gt;</p>

<p>&lt;p&gt;To verify that your code validates, see the &lt;a href=&quot;https://developers.facebook.com/tools/debug&quot;&gt;Facebook Debugger&lt;/a&gt;.&lt;/p&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/04/supporting-twitter-cards-with-jekyll</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/04/supporting-twitter-cards-with-jekyll/"/><title>Supporting Twitter Cards with Jekyll</title><published>2013-04-17T18:16:00-04:00</published><updated>2013-04-17T18:16:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;I just added support for &lt;a href=&quot;https://dev.twitter.com/docs/cards&quot;&gt;Twitter Cards&lt;/a&gt; to my website because I wanted more control over how my site displays on Twitter. There are six different card types, although the only one that’s appropriate for my site is the &lt;a href=&quot;http://dev.twitter.com/docs/cards/types/summary-card&quot;&gt;Summary Card&lt;/a&gt;, which lets users preview site content within a tweet.&lt;/p&gt;</p>

<p>&lt;h2&gt;Summary Card&lt;/h2&gt;</p>

<p>&lt;p&gt;The Summary Card is the default and includes a title, description, thumbnail, and Twitter account attribution. The following markup is provided by the developer docs:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:card&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:site&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@site_username&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:title&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:url&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Up than 200 characters.&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:creator&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@creator_username&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:image:src&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://path/to/image.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;Card, Site, and Creator&lt;/h3&gt;</p>

<p>&lt;p&gt;These three meta tags and their values stay constant, regardless of page content. I use my Twitter handle for both &lt;em&gt;site&lt;/em&gt; and &lt;em&gt;creator&lt;/em&gt;, although I’m not sure that I need to. I figure that it can’t hurt to do so, though.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:card&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:site&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@site_username&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:creator&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@creator_username&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;Title&lt;/h3&gt;</p>

<p>&lt;p&gt;I’ve denoted a site title in my &lt;strong&gt;_config.yml&lt;/strong&gt; and a page title in the &lt;strong&gt;YAML Front Matter&lt;/strong&gt; block that’s specific to every page and post on my site.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;{% if page.title %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:title&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:title&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;URL&lt;/h3&gt;</p>

<p>&lt;p&gt;I’ve also specified a &lt;em&gt;site.url&lt;/em&gt; output as an absolute path in my in my &lt;strong&gt;_config.yml&lt;/strong&gt;, as well as a &lt;em&gt;page.url&lt;/em&gt; output in my &lt;strong&gt;YAML Front Matter&lt;/strong&gt; block.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;{% if page.url %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:url&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ page.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;Description&lt;/h3&gt;</p>

<p>&lt;p&gt;Likewise, I have a general site description and a page specific description:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;{% if page.description %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.description }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.description }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;p&gt;A different approach to the page description is to escape and truncate the page content, which is how &lt;a href=&quot;http://paulstamatiou.com/responsive-retina-blog-development-part-1&quot;&gt;Paul Stamatiou handles it&lt;/a&gt;:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.content | strip_html | xml_escape | truncate: 200 }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h3&gt;Image&lt;/h3&gt;</p>

<p>&lt;p&gt;I’ve also set a default image, if there’s not an image for the current page.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;{% if page.image %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:image:src&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}/path/to/image/{{ page.image }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:image:src&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}/path/to/image/logo.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;All Together Now&lt;/h2&gt;</p>

<p>&lt;p&gt;Here’s what my final block of code looks like:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:card&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:site&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@site_username&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:creator&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@creator_username&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% if page.title %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:title&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:title&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.url %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:url&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ page.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.description %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.description }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:description&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.description }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
{% if page.image %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:image:src&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}/path/to/image/{{ page.image }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% else %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;twitter:image:src&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}/path/to/image/logo.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;h2&gt;Validate&lt;/h2&gt;</p>

<p>&lt;p&gt;If you’re curious if your code validates, Twitter has provided a &lt;a href=&quot;https://dev.twitter.com/docs/cards/validation/validator&quot;&gt;validator&lt;/a&gt; so you can easily check. You’ll need to pass the validation test before you can submit a &lt;strong&gt;Domain Approval Request&lt;/strong&gt;, which will whitelist your website for inclusion with the service. It shouldn’t take much time at all to be approved.&lt;/p&gt;</p>

<p>&lt;div class=&quot;gray-box&quot;&gt;
  &lt;p&gt;&lt;strong&gt;More Info:&lt;/strong&gt; David Walsh has a really great overview of &lt;a href=&quot;http://davidwalsh.name/twitter-cards&quot;&gt;Twitter Cards&lt;/a&gt;, which is well worth a read.&lt;/p&gt;
&lt;/div&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/04/inline-svg-with-png-fallback</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/04/inline-svg-with-png-fallback/"/><title>Inline SVG with PNG Fallback</title><published>2013-04-10T17:41:00-04:00</published><updated>2013-04-10T17:41:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;Notice anything different about my balloon logo? Probably not, as the change is subtle, but the image is now an &lt;strong&gt;inline SVG&lt;/strong&gt; instead of an &lt;strong&gt;SVG background image&lt;/strong&gt;. I did this to allow the colors of the balloon to darken on hover.&lt;/p&gt;</p>

<p>&lt;p&gt;Using an inline SVG is the only way to do this, as the browser regards the other implementations of SVG as externally linked files. That prevents the browser from respecting any inline CSS pseudo classes within the SVG.&lt;/p&gt;</p>

<p>&lt;p&gt;As an added benefit, an HTTP request is saved, although this boon to page load optimization is at the expense of the tidiness of the markup. It’s not such a drawback, especially if the HTML will be minified before being deployed.&lt;/p&gt;</p>

<p>&lt;p&gt;As for browser support, &lt;a href=&quot;http://caniuse.com/#feat=svg-html5&quot;&gt;inline SVGs are supported by all modern browsers&lt;/a&gt;, so long as the proper &lt;strong&gt;HTML5 DOCTYPE&lt;/strong&gt; (&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;) is declared. Not surprisingly, IE8 doesn’t support inline SVGs, so a fallback is needed for the small percentage of visitors who use that browser.&lt;/p&gt;</p>

<p>&lt;p&gt;The obvious choice for an image fallback is a PNG since they support alpha transparency and are easily optimized for file size with &lt;a href=&quot;http://pngmini.com/&quot;&gt;ImageAlpha&lt;/a&gt; and &lt;a href=&quot;http://imageoptim.com/&quot;&gt;ImageOptim&lt;/a&gt;.&lt;/p&gt;</p>

<p>&lt;h2&gt;How Best to Fallback?&lt;/h2&gt;</p>

<p>&lt;p&gt;I initially considered replacing the inline SVG markup with an &lt;code&gt;img&lt;/code&gt; tag via either &lt;strong&gt;JavaScript&lt;/strong&gt; or &lt;strong&gt;jQuery&lt;/strong&gt;, but decided against it. The user may have JavaScript disabled and if I elect to use jQuery I’ll need to make an additional HTTP request to load the library.&lt;/p&gt;</p>

<p>&lt;p&gt;Thankfully, I stumbled upon &lt;a href=&quot;http://www.kaizou.org/2009/03/inline-svg-fallback/&quot;&gt;a better solution&lt;/a&gt; that makes use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/SVG/Element/foreignObject&quot;&gt;foreignObject&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/SVG/Element/switch&quot;&gt;switch&lt;/a&gt;, which are both elements specific to SVG.&lt;/p&gt;</p>

<p>&lt;blockquote&gt;&lt;p&gt;The &lt;code&gt;foreignObject&lt;/code&gt; element allows for inclusion of a foreign
XML namespace which has its graphical content drawn by a
different user agent.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;cite&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/SVG/Element/foreignObject&quot;&gt;Mozilla Developer Network&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;</p>

<p>&lt;p&gt;With &lt;code&gt;foreignObject&lt;/code&gt; I can insert fallback &lt;strong&gt;HTML&lt;/strong&gt; into the SVG, which will look like this:&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
  SVG
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;foreignObject&amp;gt;&lt;/span&gt;</p>

<pre><code>Fallback HTML
</code></pre>

<p>  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/foreignObject&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;p&gt;The final step is to put the SVG code into a &lt;strong&gt;group&lt;/strong&gt; (&lt;code&gt;g&lt;/code&gt;) and then wrap the group and foreignObject in a &lt;strong&gt;switch&lt;/strong&gt; (&lt;code&gt;switch&lt;/code&gt;) element. The switch will then evaluate the children elements in order. The first element that has the proper attributes will be rendered, which will be the the group with the SVG.&lt;/p&gt;</p>

<p>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;g&amp;gt;&lt;/span&gt;</p>

<pre><code>SVG
</code></pre>

<p>  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;foreignObject&amp;gt;&lt;/span&gt;</p>

<pre><code>Fallback
</code></pre>

<p>  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/foreignObject&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</p>

<p>&lt;p&gt;Browsers that support SVG will render the inline SVG, while older browsers will instead display the foreignObject, which contains the fallback PNG. Easy and efficient, right?&lt;/p&gt;</p>

<p>&lt;p&gt;Unfortunately, both the SVG and the image fallback will be loaded by the browser. This isn’t such a big deal, so long as the image is optimized and then converted to a &lt;strong&gt;base64 string&lt;/strong&gt;, thus saving another HTTP request. I recommend my &lt;a href=&quot;http://webcodertools.com/imagetobase64converter&quot;&gt;favorite converter&lt;/a&gt; for the task!&lt;/p&gt;</p>

  ]]></content></entry><entry><id>http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages</id><link type="text/html" rel="alternate" href="http://davidensinger.com/2013/04/deploying-jekyll-to-github-pages/"/><title>Deploying Jekyll with Plugins to GitHub Pages</title><published>2013-04-08T06:30:00-04:00</published><updated>2013-04-08T06:30:00-04:00</updated><author><name>David Ensinger</name><uri>http://davidensinger.com/</uri></author><content type="html"><![CDATA[
    <p>&lt;p&gt;In spite of my resolution to design and develop this website simply, I’ve decided to run &lt;strong&gt;Jekyll&lt;/strong&gt; with plugins. This complicates my deployment because &lt;strong&gt;GitHub Pages&lt;/strong&gt; runs Jekyll in &lt;code&gt;&mdash;safe&lt;/code&gt; mode, which quite reasonably prevents the running of arbitrary Ruby code on the GitHub servers.&lt;/p&gt;</p>

<p>&lt;div class=&quot;yellow-box&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I’ve since succeeded in automating this, which I detail in &lt;a href=&quot;http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/&quot;&gt;Automating Jekyll Deployment to GitHub Pages with Rake&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</p>

<p>&lt;p&gt;To work around this limitation, the consensus amongst developers is to create two branches: one for development (that I’ve named &lt;em&gt;source&lt;/em&gt;) and the other solely for the compiled &lt;strong&gt;_site&lt;/strong&gt;. In the former branch I’ll add additionally functionality via custom plugins, while the latter branch will serve as the &lt;em&gt;master&lt;/em&gt; that GitHub uses to publish the site.&lt;/p&gt;</p>

<p>&lt;p&gt;I’ve chosen to follow these &lt;a href=&quot;https://github.com/rson/rson.github.com&quot;&gt;excellent deployment steps&lt;/a&gt; by &lt;a href=&quot;http://rsontech.net/&quot;&gt;Randy Morris&lt;/a&gt;, which I’ll list below with brief explanations as to what each command does.&lt;/p&gt;</p>

<p>&lt;p&gt;Delete &lt;em&gt;master&lt;/em&gt; branch:&lt;/p&gt;</p>

<p>&lt;pre&gt;&lt;code&gt;git branch -D master
&lt;/code&gt;&lt;/pre&gt;</p>

<p>&lt;p&gt;Check out a new &lt;em&gt;master&lt;/em&gt; branch:&lt;/p&gt;</p>

<p>&lt;pre&gt;&lt;code&gt;git checkout -b master
&lt;/code&gt;&lt;/pre&gt;</p>

<p>&lt;p&gt;Force the &lt;em&gt;_site/&lt;/em&gt; subdirectory to be project root:&lt;/p&gt;</p>

<p>&lt;pre&gt;&lt;code&gt;git filter-branch &mdash;subdirectory-filter _site/ -f
&lt;/code&gt;&lt;/pre&gt;</p>

<p>&lt;p&gt;Checkout the &lt;em&gt;source&lt;/em&gt; branch:&lt;/p&gt;</p>

<p>&lt;pre&gt;&lt;code&gt;git checkout source
&lt;/code&gt;&lt;/pre&gt;</p>

<p>&lt;p&gt;Push all branches to origin:&lt;/p&gt;</p>

<p>&lt;pre&gt;&lt;code&gt;git push &mdash;all origin
&lt;/code&gt;&lt;/pre&gt;</p>

<p>&lt;p&gt;Pretty simple, right? I’m glad that I’ll now be able to add categories and tags to my site, which is next on my todo list!&lt;/p&gt;</p>

<p>&lt;h2&gt;Next Steps&lt;/h2&gt;</p>

<p>&lt;p&gt;I’d like to automate this by including these deployment commands into a build script that concatenates, minifies, and (when applicable) optimizes my assets after Jekyll compiles the site. Still working on that, though!&lt;/p&gt;</p>

  ]]></content></entry></feed>